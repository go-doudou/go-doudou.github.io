import{r as p,o,a as t,b as n,e,F as r,f as l,g as s}from"./app.594cd40c.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const i={},D=l('<h1 id="define-api" tabindex="-1"><a class="header-anchor" href="#define-api" aria-hidden="true">#</a> Define API</h1><p>Go-doudou uses golang interface as IDL to let users define APIs.</p><h2 id="benefits" tabindex="-1"><a class="header-anchor" href="#benefits" aria-hidden="true">#</a> Benefits</h2><ul><li>For go-doudou users, have a flattened learning curve.</li><li>For go-doudou developers, no need to develop new DSL and IDE plugins, which saves a lot of work.</li></ul><h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h2><p>There are some limitations when you define methods as exposed API for client in svc.go file.</p>',6),u=l("<li>Only support <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code> http methods. You can specify http method by prefixing method name with one of <code>Get</code>/<code>Post</code>/<code>Put</code>/<code>Delete</code>. If you don&#39;t specify, default is <code>POST</code>.</li><li>First input parameter MUST be <code>context.Context</code>.</li>",2),d=s("Only support most of golang "),b={href:"https://golang.org/pkg/builtin/",target:"_blank",rel:"noopener noreferrer"},y=s("built-in types"),m=s(", map with string key, custom structs in vo package, corresponding slice and pointer types for input and output parameters. When generate code and OpenAPI 3.0 spec, it will scan structs in vo package only. The structs placed in other than vo package will not be known by go-doudou."),h=n("li",null,[s("As a special case, it supports "),n("code",null,"v3.FileModel"),s(" for uploading files as input parameter and "),n("code",null,"*os.File"),s(" for downloading files as output parameter.")],-1),_=n("li",null,"NOT support alias types as field of struct.",-1),g=n("li",null,"NOT support func, channel and anonymous struct type as input and output parameter.",-1),f=n("li",null,[s("Only request parameter "),n("code",null,"required"),s(" validation feature built-in, no struct field validation. Go-doudou treats pointer type as optional, non-pointer type as required.")],-1),A=s("As for OpenAPI 3.0 documentation "),v=n("li",null,[s("Not support documenting request headers and response headers, global parameters and authentication. You can write down these information as golang comments immediately above service interface or corresponding methods in "),n("code",null,"svc.go"),s(" file, and these comments will be set to each "),n("code",null,"description"),s(" attribute in generated OpenAPI 3.0 json file and also be displayed in online api documentation.")],-1),C=s("Not support "),x={href:"https://spec.openapis.org/oas/v3.0.3#tag-object",target:"_blank",rel:"noopener noreferrer"},w=s("Tag Object"),E=s(", "),k={href:"https://spec.openapis.org/oas/v3.0.3#callback-object",target:"_blank",rel:"noopener noreferrer"},O=s("Callback Object"),B=s(", "),j={href:"https://spec.openapis.org/oas/v3.0.3#discriminator-object",target:"_blank",rel:"noopener noreferrer"},P=s("Discriminator Object"),q=s(", "),I={href:"https://spec.openapis.org/oas/v3.0.3#xml-object",target:"_blank",rel:"noopener noreferrer"},T=s("XML Object"),F=s(", "),U={href:"https://spec.openapis.org/oas/v3.0.3#security-scheme-object",target:"_blank",rel:"noopener noreferrer"},N=s("Security Scheme Object"),S=s(", "),L={href:"https://spec.openapis.org/oas/v3.0.3#oauth-flows-object",target:"_blank",rel:"noopener noreferrer"},G=s("OAuth Flows Object"),M=s(", "),V={href:"https://spec.openapis.org/oas/v3.0.3#oauth-flow-object",target:"_blank",rel:"noopener noreferrer"},Y=s("OAuth Flow Object"),K=s(", "),R={href:"https://spec.openapis.org/oas/v3.0.3#security-requirement-object",target:"_blank",rel:"noopener noreferrer"},Q=s("Security Requirement Object "),W=s(". You may not need them, but I should mention here."),X=l(`<h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> service</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	v3 </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/openapi/v3&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;os&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;usersvc/vo&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Usersvc is user management service</span></span>
<span class="line"><span style="color:#6A9955;">// You should set Bearer Token header when you request protected endpoints such as user detail, user pagination and upload avatar.</span></span>
<span class="line"><span style="color:#6A9955;">// You can add doc for whole service here</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Usersvc</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// PageUsers is user pagination api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// demo how to define post request api which accepts application/json content-type</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">PageUsers</span><span style="color:#D4D4D4;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// pagination parameter</span></span>
<span class="line"><span style="color:#D4D4D4;">		query vo.PageQuery) (</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// pagination result</span></span>
<span class="line"><span style="color:#D4D4D4;">		data vo.PageRet,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// error</span></span>
<span class="line"><span style="color:#D4D4D4;">		err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// GetUser is user detail api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// demo how to define get http request with query string parameters</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetUser</span><span style="color:#D4D4D4;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// user id</span></span>
<span class="line"><span style="color:#D4D4D4;">		userId </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) (</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// user detail</span></span>
<span class="line"><span style="color:#D4D4D4;">		data vo.UserVo,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// error</span></span>
<span class="line"><span style="color:#D4D4D4;">		err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// PublicSignUp is user signup api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// demo how to define post request api which accepts application/x-www-form-urlencoded content-type</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">PublicSignUp</span><span style="color:#D4D4D4;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// username</span></span>
<span class="line"><span style="color:#D4D4D4;">		username </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// password</span></span>
<span class="line"><span style="color:#D4D4D4;">		password </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// image code, optional as it is pointer type</span></span>
<span class="line"><span style="color:#D4D4D4;">		code *</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	) (</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// return OK if success</span></span>
<span class="line"><span style="color:#D4D4D4;">		data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// PublicLogIn is user login api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// demo how to do authentication and issue token</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">PublicLogIn</span><span style="color:#D4D4D4;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// username</span></span>
<span class="line"><span style="color:#D4D4D4;">		username </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// password</span></span>
<span class="line"><span style="color:#D4D4D4;">		password </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) (</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// token</span></span>
<span class="line"><span style="color:#D4D4D4;">		data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// UploadAvatar is avatar upload api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// demo how to define file upload api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// NOTE: there must be at least one []*v3.FileModel or *v3.FileModel input parameter</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">UploadAvatar</span><span style="color:#D4D4D4;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// user avatar</span></span>
<span class="line"><span style="color:#D4D4D4;">		avatar v3.FileModel, id </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) (</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// return OK if success</span></span>
<span class="line"><span style="color:#D4D4D4;">		data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// GetPublicDownloadAvatar is avatar download api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// demo how to define file download api</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// NOTE: there must be one and at most one *os.File output parameter</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetPublicDownloadAvatar</span><span style="color:#D4D4D4;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// user id</span></span>
<span class="line"><span style="color:#D4D4D4;">		userId </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) (</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#6A9955;">// avatar file</span></span>
<span class="line"><span style="color:#D4D4D4;">		data *os.File, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div>`,2);function z(H,J){const a=p("ExternalLinkIcon");return o(),t(r,null,[D,n("ol",null,[u,n("li",null,[d,n("a",b,[y,e(a)]),m]),h,_,g,f,n("li",null,[A,n("ul",null,[v,n("li",null,[C,n("a",x,[w,e(a)]),E,n("a",k,[O,e(a)]),B,n("a",j,[P,e(a)]),q,n("a",I,[T,e(a)]),F,n("a",U,[N,e(a)]),S,n("a",L,[G,e(a)]),M,n("a",V,[Y,e(a)]),K,n("a",R,[Q,e(a)]),W])])])]),X],64)}var ss=c(i,[["render",z]]);export{ss as default};
