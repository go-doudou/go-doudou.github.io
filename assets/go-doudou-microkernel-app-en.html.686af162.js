import{r as e,o as p,a as o,b as n,e as r,F as c,g as a,f as s}from"./app.2025f35b.js";import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";const D={},i=a(`<h1 id="go-doudou-langchaingo-microkernel-architecture-rag-large-language-model-knowledge-base-practice-part-2" tabindex="-1"><a class="header-anchor" href="#go-doudou-langchaingo-microkernel-architecture-rag-large-language-model-knowledge-base-practice-part-2" aria-hidden="true">#</a> go-doudou + langchaingo Microkernel Architecture RAG Large Language Model Knowledge Base Practice (Part 2)</h1><p>In the previous article, we introduced the basic concepts and principles of go-doudou framework&#39;s plugin mechanism and modular pluggable microkernel architecture. This article will explain in detail how to build a microkernel architecture application based on go-doudou from scratch, helping newcomers quickly get started with development.</p><h2 id="_1-review-of-microkernel-architecture-application-concepts" tabindex="-1"><a class="header-anchor" href="#_1-review-of-microkernel-architecture-application-concepts" aria-hidden="true">#</a> 1. Review of Microkernel Architecture Application Concepts</h2><p>Microkernel architecture (also known as plugin architecture) divides applications into core systems and plugin modules:</p><ul><li><strong>Core System</strong>: Provides basic services and plugin management mechanisms</li><li><strong>Plugin Modules</strong>: Independently developed and deployed functional units</li></ul><p>The advantages of this architecture include:</p><ol><li><strong>High Cohesion, Low Coupling</strong>: Modules communicate through well-defined interfaces</li><li><strong>Strong Extensibility</strong>: New functionality can be added without modifying the core system</li><li><strong>Flexible Deployment</strong>: Modules can be loaded as needed, making the system lighter</li><li><strong>Independent Development</strong>: Teams can develop different modules in parallel</li></ol><p>The go-doudou framework, with its powerful CLI tools and plugin mechanism, makes building microkernel architecture applications simpler and more efficient.</p><h2 id="_2-environment-preparation" tabindex="-1"><a class="header-anchor" href="#_2-environment-preparation" aria-hidden="true">#</a> 2. Environment Preparation</h2><h3 id="_2-1-installing-go-doudou-cli" tabindex="-1"><a class="header-anchor" href="#_2-1-installing-go-doudou-cli" aria-hidden="true">#</a> 2.1 Installing go-doudou CLI</h3><p>First, we need to install the go-doudou command-line tool. For Go 1.17 and above, it is recommended to use the following command for global installation:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go install -v github.com/unionj-cloud/go-doudou/v2@v2.5.9</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>After installation, you can verify if the installation was successful with the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou version</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_2-2-development-environment-requirements" tabindex="-1"><a class="header-anchor" href="#_2-2-development-environment-requirements" aria-hidden="true">#</a> 2.2 Development Environment Requirements</h3><ul><li>Go 1.16 and above</li><li>Git (version control)</li><li>IDE with Go module support (GoLand or Visual Studio Code recommended)</li></ul><h2 id="_3-creating-a-workspace" tabindex="-1"><a class="header-anchor" href="#_3-creating-a-workspace" aria-hidden="true">#</a> 3. Creating a Workspace</h2><p>go-doudou provides the <code>work</code> command to create and manage workspaces, which is the first step in building a microkernel architecture application.</p><h3 id="_3-1-initializing-the-workspace" tabindex="-1"><a class="header-anchor" href="#_3-1-initializing-the-workspace" aria-hidden="true">#</a> 3.1 Initializing the Workspace</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Create a workspace named go-doudou-rag</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou work init go-doudou-rag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Enter the workspace directory</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> go-doudou-rag</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This command creates a workspace with the following structure:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou-rag/
  \u251C\u2500\u2500 go.work          # Go workspace file
  \u251C\u2500\u2500 main/            # Main application module
  \u2502   \u251C\u2500\u2500 cmd/         # Main program entry point
  \u2502   \u2514\u2500\u2500 config/      # Main program configuration
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>After the workspace is created, a Git repository is automatically initialized and a <code>.gitignore</code> file is generated. The <code>main</code> module is the core of the application, responsible for loading and managing all plugin modules.</p><h2 id="_4-creating-the-core-module-of-a-microkernel-architecture-application" tabindex="-1"><a class="header-anchor" href="#_4-creating-the-core-module-of-a-microkernel-architecture-application" aria-hidden="true">#</a> 4. Creating the Core Module of a Microkernel Architecture Application</h2><p>The main module is the core of the microkernel architecture, responsible for loading and managing plugins. We need to understand and modify the core code of the main module.</p><h3 id="_4-1-understanding-the-main-module-structure" tabindex="-1"><a class="header-anchor" href="#_4-1-understanding-the-main-module-structure" aria-hidden="true">#</a> 4.1 Understanding the Main Module Structure</h3><p>The <code>cmd/main.go</code> file of the main module contains the code for initializing and starting the application. In a go-doudou microkernel architecture, this file typically contains the following:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/grpcx&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/plugin&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/rest&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/pipeconn&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/zlogger&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// The following are imported plugin modules, which may not exist in the initial stage</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Create REST server</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Create gRPC server (if needed)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">grpcServer</span><span style="color:#D4D4D4;"> := grpcx.</span><span style="color:#DCDCAA;">NewGrpcServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">lis</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dialCtx</span><span style="color:#D4D4D4;"> := pipeconn.</span><span style="color:#DCDCAA;">NewPipeListener</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Get all registered service plugins</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">plugins</span><span style="color:#D4D4D4;"> := plugin.</span><span style="color:#DCDCAA;">GetServicePlugins</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> plugins.</span><span style="color:#DCDCAA;">Keys</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> := plugins.</span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(key)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// Initialize each plugin</span></span>
<span class="line"><span style="color:#D4D4D4;">        value.</span><span style="color:#DCDCAA;">Initialize</span><span style="color:#D4D4D4;">(srv, grpcServer, dialCtx)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Resource cleanup</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">recover</span><span style="color:#D4D4D4;">(); r != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            zlogger.</span><span style="color:#DCDCAA;">Info</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">Msgf</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Recovered. Error: </span><span style="color:#9CDCFE;">%v</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, r)</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// Close all plugins</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> plugins.</span><span style="color:#DCDCAA;">Keys</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> := plugins.</span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(key)</span></span>
<span class="line"><span style="color:#D4D4D4;">            value.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Start gRPC server</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">go</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        grpcServer.</span><span style="color:#DCDCAA;">RunWithPipe</span><span style="color:#D4D4D4;">(lis)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Add API documentation routes</span></span>
<span class="line"><span style="color:#D4D4D4;">    srv.</span><span style="color:#DCDCAA;">AddRoutes</span><span style="color:#D4D4D4;">(rest.</span><span style="color:#DCDCAA;">DocRoutes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Start REST server</span></span>
<span class="line"><span style="color:#D4D4D4;">    srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>This code implements the core functionality of the microkernel architecture: getting registered plugins, initializing them, and releasing resources when the application exits.</p><h3 id="_4-2-adding-common-middleware-and-tools" tabindex="-1"><a class="header-anchor" href="#_4-2-adding-common-middleware-and-tools" aria-hidden="true">#</a> 4.2 Adding Common Middleware and Tools</h3><p>In the main module, we typically add some common middleware and tools, such as authentication, logging, monitoring, etc. For example, JWT authentication middleware:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">mkdir -p toolkit/auth</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Create an <code>auth.go</code> file in the <code>toolkit/auth</code> directory, implementing JWT authentication middleware:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> auth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;fmt&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/golang-jwt/jwt/v5&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/rest/httprouter&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/copier&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/toolkit/config&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;net/http&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;slices&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;strings&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;time&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">authMiddleware</span><span style="color:#D4D4D4;"> *AuthMiddleware</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">authMiddleware</span><span style="color:#D4D4D4;"> = &amp;AuthMiddleware{</span></span>
<span class="line"><span style="color:#D4D4D4;">		JwtSecret:    conf.Auth.JwtSecret,</span></span>
<span class="line"><span style="color:#D4D4D4;">		JwtExpiresIn: conf.Auth.JwtExpiresIn,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">JwtToken</span><span style="color:#D4D4D4;">(userInfo UserInfo) </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> authMiddleware.</span><span style="color:#DCDCAA;">JwtToken</span><span style="color:#D4D4D4;">(userInfo)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Jwt</span><span style="color:#D4D4D4;">(inner http.Handler) http.Handler {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> authMiddleware.</span><span style="color:#DCDCAA;">Jwt</span><span style="color:#D4D4D4;">(inner)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AuthMiddleware</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	JwtSecret    </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	JwtExpiresIn time.Duration</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UserInfo</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	Username </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;username&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ctxKey</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> userInfoKey </span><span style="color:#9CDCFE;">ctxKey</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ctxKey</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">NewUserInfoContext</span><span style="color:#D4D4D4;">(ctx context.Context, userInfo UserInfo) context.Context {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> context.</span><span style="color:#DCDCAA;">WithValue</span><span style="color:#D4D4D4;">(ctx, userInfoKey, userInfo)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">UserInfoFromContext</span><span style="color:#D4D4D4;">(ctx context.Context) (UserInfo, </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">userInfo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := ctx.</span><span style="color:#DCDCAA;">Value</span><span style="color:#D4D4D4;">(userInfoKey).(UserInfo)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> userInfo, ok</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (auth *AuthMiddleware) </span><span style="color:#DCDCAA;">JwtToken</span><span style="color:#D4D4D4;">(userInfo UserInfo) </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">claims</span><span style="color:#D4D4D4;"> jwt.MapClaims</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := copier.</span><span style="color:#DCDCAA;">DeepCopy</span><span style="color:#D4D4D4;">(userInfo, &amp;claims)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(err)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	claims[</span><span style="color:#CE9178;">&quot;exp&quot;</span><span style="color:#D4D4D4;">] = time.</span><span style="color:#DCDCAA;">Now</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">Add</span><span style="color:#D4D4D4;">(auth.JwtExpiresIn).</span><span style="color:#DCDCAA;">Unix</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">token</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := jwt.</span><span style="color:#DCDCAA;">NewWithClaims</span><span style="color:#D4D4D4;">(jwt.SigningMethodHS256, claims).</span><span style="color:#DCDCAA;">SignedString</span><span style="color:#D4D4D4;">([]</span><span style="color:#DCDCAA;">byte</span><span style="color:#D4D4D4;">(auth.JwtSecret))</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(err)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> token</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (auth *AuthMiddleware) </span><span style="color:#DCDCAA;">Jwt</span><span style="color:#D4D4D4;">(inner http.Handler) http.Handler {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> http.</span><span style="color:#DCDCAA;">HandlerFunc</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(w http.ResponseWriter, r *http.Request) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">paramsFromCtx</span><span style="color:#D4D4D4;"> := httprouter.</span><span style="color:#DCDCAA;">ParamsFromContext</span><span style="color:#D4D4D4;">(r.</span><span style="color:#DCDCAA;">Context</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">routeName</span><span style="color:#D4D4D4;"> := paramsFromCtx.</span><span style="color:#DCDCAA;">MatchedRouteName</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">annotation</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := framework.</span><span style="color:#DCDCAA;">GetAnnotation</span><span style="color:#D4D4D4;">(routeName, </span><span style="color:#CE9178;">&quot;@role&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> ok &amp;&amp; slices.</span><span style="color:#DCDCAA;">Contains</span><span style="color:#D4D4D4;">(annotation.Params, </span><span style="color:#CE9178;">&quot;guest&quot;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			inner.</span><span style="color:#DCDCAA;">ServeHTTP</span><span style="color:#D4D4D4;">(w, r)</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">authHeader</span><span style="color:#D4D4D4;"> := r.Header.</span><span style="color:#DCDCAA;">Get</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Authorization&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">tokenString</span><span style="color:#D4D4D4;"> := strings.</span><span style="color:#DCDCAA;">TrimSpace</span><span style="color:#D4D4D4;">(strings.</span><span style="color:#DCDCAA;">TrimPrefix</span><span style="color:#D4D4D4;">(authHeader, </span><span style="color:#CE9178;">&quot;Bearer &quot;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">token</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := jwt.</span><span style="color:#DCDCAA;">Parse</span><span style="color:#D4D4D4;">(tokenString, </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(token *jwt.Token) (</span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;">{}, </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := token.Method.(*jwt.SigningMethodHMAC); !ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">				</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">, fmt.</span><span style="color:#DCDCAA;">Errorf</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;unexpected signing method: </span><span style="color:#9CDCFE;">%v</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, token.Header[</span><span style="color:#CE9178;">&quot;alg&quot;</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">			}</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> []</span><span style="color:#DCDCAA;">byte</span><span style="color:#D4D4D4;">(auth.JwtSecret), </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">		})</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> || !token.Valid {</span></span>
<span class="line"><span style="color:#D4D4D4;">			w.</span><span style="color:#DCDCAA;">WriteHeader</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">401</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">			w.</span><span style="color:#DCDCAA;">Write</span><span style="color:#D4D4D4;">([]</span><span style="color:#DCDCAA;">byte</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Unauthorised.</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">claims</span><span style="color:#D4D4D4;"> := token.Claims.(jwt.MapClaims)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">userInfo</span><span style="color:#D4D4D4;"> UserInfo</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> = copier.</span><span style="color:#DCDCAA;">DeepCopy</span><span style="color:#D4D4D4;">(claims, &amp;userInfo)</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(err)</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;"> = r.</span><span style="color:#DCDCAA;">WithContext</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">NewUserInfoContext</span><span style="color:#D4D4D4;">(r.</span><span style="color:#DCDCAA;">Context</span><span style="color:#D4D4D4;">(), userInfo))</span></span>
<span class="line"><span style="color:#D4D4D4;">		inner.</span><span style="color:#DCDCAA;">ServeHTTP</span><span style="color:#D4D4D4;">(w, r)</span></span>
<span class="line"><span style="color:#D4D4D4;">	})</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br></div></div><p>Then use this middleware in the <code>main.go</code> of the main module:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Add JWT middleware</span></span>
<span class="line"><span style="color:#D4D4D4;">    srv.</span><span style="color:#DCDCAA;">Use</span><span style="color:#D4D4D4;">(auth.Jwt)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Other code...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_5-creating-feature-modules" tabindex="-1"><a class="header-anchor" href="#_5-creating-feature-modules" aria-hidden="true">#</a> 5. Creating Feature Modules</h2><p>Next, we create specific feature modules. Each module is an independent Go module but will be registered as a plugin for the main application. We will create three example modules: authentication module, knowledge base module, and chat module.</p><h3 id="_5-1-creating-the-authentication-module" tabindex="-1"><a class="header-anchor" href="#_5-1-creating-the-authentication-module" aria-hidden="true">#</a> 5.1 Creating the Authentication Module</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Execute in the workspace root directory</span></span>
<span class="line"><span style="color:#6A9955;"># Create authentication module</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init module-auth -m go-doudou-rag/module-auth --module --case snake -t rest</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Parameter explanation:</p><ul><li><code>svc init</code>: Initialize service</li><li><code>module-auth</code>: Service name</li><li><code>-m go-doudou-rag/module-auth</code>: Module import path</li><li><code>--module</code>: Specify this is a module in the workspace</li><li><code>--case snake</code>: Use snake_case naming style</li><li><code>-t rest</code>: Generate RESTful service</li></ul><p>This command creates a <code>module-auth</code> directory and generates the basic module structure:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">module-auth/
  \u251C\u2500\u2500 cmd/            # Independent running entry point
  \u251C\u2500\u2500 config/         # Module configuration
  \u251C\u2500\u2500 dto/            # Data Transfer Objects
  \u251C\u2500\u2500 plugin/         # Plugin implementation
  \u251C\u2500\u2500 transport/      # Transport layer
  \u2502   \u2514\u2500\u2500 httpsrv/    # HTTP service
  \u251C\u2500\u2500 go.mod          # Go module file
  \u251C\u2500\u2500 svc.go          # Service interface definition
  \u2514\u2500\u2500 svcimpl.go      # Service implementation
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>At the same time, go-doudou will automatically execute <code>go work use module-auth</code> to add the new module to the workspace and update the <code>main.go</code> file of the main module, adding the import of the new module plugin:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Other imports...</span></span>
<span class="line"><span style="color:#D4D4D4;">    _ </span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/plugin&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_5-2-defining-the-service-interface" tabindex="-1"><a class="header-anchor" href="#_5-2-defining-the-service-interface" aria-hidden="true">#</a> 5.2 Defining the Service Interface</h3><p>Edit the <code>module-auth/svc.go</code> file, defining the interface for the authentication service:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> service</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/dto&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/internal/model&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//go:generate go-doudou svc http --case snake</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ModuleAuth</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// PostLogin @role(guest)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">PostLogin</span><span style="color:#D4D4D4;">(ctx context.Context, req dto.LoginReq) (data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetMe</span><span style="color:#D4D4D4;">(ctx context.Context) (data *model.User, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Note the <code>//go:generate</code> directive, which tells go-doudou to generate HTTP-related code.</p><h3 id="_5-3-creating-dtos-and-models" tabindex="-1"><a class="header-anchor" href="#_5-3-creating-dtos-and-models" aria-hidden="true">#</a> 5.3 Creating DTOs and Models</h3><p>Create a <code>login.go</code> file in the <code>dto</code> directory:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> dto</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LoginReq</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    Username </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;username&quot; validate:&quot;required&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    Password </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;password&quot; validate:&quot;required&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Create a <code>user.go</code> file in the <code>internal/model</code> directory:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> model</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;time&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    ID        </span><span style="color:#4EC9B0;">uint</span><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">\`gorm:&quot;primarykey&quot; json:&quot;id&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    Username  </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">\`json:&quot;username&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    Password  </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">\`json:&quot;-&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    CreatedAt time.Time </span><span style="color:#CE9178;">\`json:&quot;created_at&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    UpdatedAt time.Time </span><span style="color:#CE9178;">\`json:&quot;updated_at&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_5-4-implementing-service-logic" tabindex="-1"><a class="header-anchor" href="#_5-4-implementing-service-logic" aria-hidden="true">#</a> 5.4 Implementing Service Logic</h3><p>Edit the <code>module-auth/svcimpl.go</code> file, implementing the logic for the authentication service:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> service</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/config&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/dto&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/internal/dao&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/internal/model&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/toolkit/auth&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> ModuleAuth = (*ModuleAuthImpl)(</span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ModuleAuthImpl</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	conf *config.Config</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">NewModuleAuth</span><span style="color:#D4D4D4;">(conf *config.Config) *ModuleAuthImpl {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> &amp;ModuleAuthImpl{</span></span>
<span class="line"><span style="color:#D4D4D4;">		conf: conf,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleAuthImpl) </span><span style="color:#DCDCAA;">PostLogin</span><span style="color:#D4D4D4;">(ctx context.Context, req dto.LoginReq) (data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">userRepo</span><span style="color:#D4D4D4;"> := dao.</span><span style="color:#DCDCAA;">GetUserRepo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> := userRepo.</span><span style="color:#DCDCAA;">FindOneByUsername</span><span style="color:#D4D4D4;">(ctx, req.Username)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> user == </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;user not found&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> user.Password != req.Password {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;wrong password&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> = auth.</span><span style="color:#DCDCAA;">JwtToken</span><span style="color:#D4D4D4;">(auth.UserInfo{</span></span>
<span class="line"><span style="color:#D4D4D4;">		Username: user.Username,</span></span>
<span class="line"><span style="color:#D4D4D4;">	})</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> data, </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleAuthImpl) </span><span style="color:#DCDCAA;">GetMe</span><span style="color:#D4D4D4;">(ctx context.Context) (data *model.User, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">userInfo</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> := auth.</span><span style="color:#DCDCAA;">UserInfoFromContext</span><span style="color:#D4D4D4;">(ctx)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">userRepo</span><span style="color:#D4D4D4;"> := dao.</span><span style="color:#DCDCAA;">GetUserRepo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;"> := userRepo.</span><span style="color:#DCDCAA;">FindOneByUsername</span><span style="color:#D4D4D4;">(ctx, userInfo.Username)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> user, </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="_5-5-data-access-layer" tabindex="-1"><a class="header-anchor" href="#_5-5-data-access-layer" aria-hidden="true">#</a> 5.5 Data Access Layer</h3><p>Create a <code>user.go</code> file in the <code>internal/dao</code> directory, implementing data access:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> dao</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/internal/model&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;gorm.io/gorm&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">userRepo</span><span style="color:#D4D4D4;"> *UserRepo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">userRepo</span><span style="color:#D4D4D4;"> = &amp;UserRepo{}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">GetUserRepo</span><span style="color:#D4D4D4;">() *UserRepo {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> userRepo</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UserRepo</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	db *gorm.DB</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (ur *UserRepo) </span><span style="color:#DCDCAA;">Use</span><span style="color:#D4D4D4;">(db *gorm.DB) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">ur.db</span><span style="color:#D4D4D4;"> = db</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (ur *UserRepo) </span><span style="color:#DCDCAA;">Init</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">admin</span><span style="color:#D4D4D4;"> := model.User{</span></span>
<span class="line"><span style="color:#D4D4D4;">		Username: </span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		Password: </span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := ur.db.</span><span style="color:#DCDCAA;">Save</span><span style="color:#D4D4D4;">(&amp;admin).Error; err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(err)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (ur *UserRepo) </span><span style="color:#DCDCAA;">FindOneByUsername</span><span style="color:#D4D4D4;">(ctx context.Context, username </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) *model.User {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">users</span><span style="color:#D4D4D4;"> []*model.User</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := ur.db.</span><span style="color:#DCDCAA;">Where</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;username = ?&quot;</span><span style="color:#D4D4D4;">, username).</span><span style="color:#DCDCAA;">Find</span><span style="color:#D4D4D4;">(&amp;users).Error; err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(err)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(users) == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> users[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h3 id="_5-6-configuring-the-module" tabindex="-1"><a class="header-anchor" href="#_5-6-configuring-the-module" aria-hidden="true">#</a> 5.6 Configuring the Module</h3><p>Edit the <code>module-auth/config/config.go</code> file, defining the module configuration:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	_ </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/config&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/envconfig&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/zlogger&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">G_Config</span><span style="color:#D4D4D4;"> *Config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Config</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	Biz </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	Db </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		Dsn </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> Config</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := envconfig.</span><span style="color:#DCDCAA;">Process</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;moduleauth&quot;</span><span style="color:#D4D4D4;">, &amp;conf)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		zlogger.</span><span style="color:#DCDCAA;">Panic</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">Msgf</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Error processing environment variables: </span><span style="color:#9CDCFE;">%v</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, err)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">G_Config</span><span style="color:#D4D4D4;"> = &amp;conf</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">() *Config {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> G_Config</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="_5-7-plugin-implementation" tabindex="-1"><a class="header-anchor" href="#_5-7-plugin-implementation" aria-hidden="true">#</a> 5.7 Plugin Implementation</h3><p>The basic implementation of the plugin has already been generated in the <code>plugin</code> directory. We need to ensure that the plugin correctly initializes the database and service. Edit the <code>module-auth/plugin/plugin.go</code> file:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> plugin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/glebarez/sqlite&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/grpcx&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/plugin&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/rest&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/pipeconn&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/stringutils&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	service </span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/config&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/internal/dao&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/internal/model&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-auth/transport/httpsrv&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;google.golang.org/grpc&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;gorm.io/gorm&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;os&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> plugin.ServicePlugin = (*ModuleAuthPlugin)(</span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ModuleAuthPlugin</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpcConns []*grpc.ClientConn</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleAuthPlugin) </span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;"> := </span><span style="color:#C586C0;">range</span><span style="color:#D4D4D4;"> receiver.grpcConns {</span></span>
<span class="line"><span style="color:#D4D4D4;">		item.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleAuthPlugin) </span><span style="color:#DCDCAA;">GoDoudouServicePlugin</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleAuthPlugin) </span><span style="color:#DCDCAA;">GetName</span><span style="color:#D4D4D4;">() </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> := os.</span><span style="color:#DCDCAA;">Getenv</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;GDD_SERVICE_NAME&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> stringutils.</span><span style="color:#DCDCAA;">IsEmpty</span><span style="color:#D4D4D4;">(name) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;cloud.unionj.ModuleAuth&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> name</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleAuthPlugin) </span><span style="color:#DCDCAA;">Initialize</span><span style="color:#D4D4D4;">(restServer *rest.RestServer, grpcServer *grpcx.GrpcServer, dialCtx pipeconn.DialContextFunc) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := gorm.</span><span style="color:#DCDCAA;">Open</span><span style="color:#D4D4D4;">(sqlite.</span><span style="color:#DCDCAA;">Open</span><span style="color:#D4D4D4;">(conf.Db.Dsn), &amp;gorm.Config{})</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;failed to connect database&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> = db.</span><span style="color:#DCDCAA;">AutoMigrate</span><span style="color:#D4D4D4;">(&amp;model.User{}); err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#DCDCAA;">panic</span><span style="color:#D4D4D4;">(err)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	dao.</span><span style="color:#DCDCAA;">Use</span><span style="color:#D4D4D4;">(db)</span></span>
<span class="line"><span style="color:#D4D4D4;">	dao.</span><span style="color:#DCDCAA;">Init</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewModuleAuth</span><span style="color:#D4D4D4;">(conf)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">routes</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">NewModuleAuthHandler</span><span style="color:#D4D4D4;">(svc))</span></span>
<span class="line"><span style="color:#D4D4D4;">	restServer.</span><span style="color:#DCDCAA;">GroupRoutes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/moduleauth&quot;</span><span style="color:#D4D4D4;">, routes)</span></span>
<span class="line"><span style="color:#D4D4D4;">	restServer.</span><span style="color:#DCDCAA;">GroupRoutes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/moduleauth&quot;</span><span style="color:#D4D4D4;">, rest.</span><span style="color:#DCDCAA;">DocRoutes</span><span style="color:#D4D4D4;">(service.Oas))</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	plugin.</span><span style="color:#DCDCAA;">RegisterServicePlugin</span><span style="color:#D4D4D4;">(&amp;ModuleAuthPlugin{})</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><h3 id="_5-8-generating-http-related-code" tabindex="-1"><a class="header-anchor" href="#_5-8-generating-http-related-code" aria-hidden="true">#</a> 5.8 Generating HTTP-Related Code</h3><p>Now, we need to generate HTTP-related code. Execute in the <code>module-auth</code> directory:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http --case snake</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This command will generate HTTP routes, handlers, and OpenAPI documentation based on the interface defined in <code>svc.go</code>.</p><h2 id="_6-creating-and-integrating-other-modules" tabindex="-1"><a class="header-anchor" href="#_6-creating-and-integrating-other-modules" aria-hidden="true">#</a> 6. Creating and Integrating Other Modules</h2><p>Follow similar steps to create the knowledge base module and chat module:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Create knowledge base module</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init module-knowledge -m go-doudou-rag/module-knowledge --module --case snake -t rest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Create chat module</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init module-chat -m go-doudou-rag/module-chat --module --case snake -t rest</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Define service interfaces, implement service logic, configure plugins, etc. for each module. Here&#39;s an example of a service interface for the knowledge base module:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> service</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	v3 </span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/toolkit/openapi/v3&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;go-doudou-rag/module-knowledge/dto&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//go:generate go-doudou svc http --case snake</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ModuleKnowledge</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">Upload</span><span style="color:#D4D4D4;">(ctx context.Context, file v3.FileModel) (data dto.UploadResult, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetList</span><span style="color:#D4D4D4;">(ctx context.Context) (data []dto.FileDTO, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetQuery</span><span style="color:#D4D4D4;">(ctx context.Context, req dto.QueryReq) (data []dto.QueryResult, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_7-communication-between-modules" tabindex="-1"><a class="header-anchor" href="#_7-communication-between-modules" aria-hidden="true">#</a> 7. Communication Between Modules</h2><p>In a microkernel architecture application, modules need to communicate with each other. go-doudou provides two main communication methods: direct import and dependency injection.</p><h3 id="_7-1-through-direct-import" tabindex="-1"><a class="header-anchor" href="#_7-1-through-direct-import" aria-hidden="true">#</a> 7.1 Through Direct Import</h3><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> service</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    knowledge </span><span style="color:#CE9178;">&quot;go-doudou-rag/module-knowledge&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;go-doudou-rag/module-chat/dto&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleChatImpl) </span><span style="color:#DCDCAA;">Chat</span><span style="color:#D4D4D4;">(ctx context.Context, req dto.ChatRequest) (err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Directly import the service interface of the knowledge base module</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">knowService</span><span style="color:#D4D4D4;"> := knowledge.</span><span style="color:#DCDCAA;">NewModuleKnowledge</span><span style="color:#D4D4D4;">(knowConf)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">queryResults</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := knowService.</span><span style="color:#DCDCAA;">GetQuery</span><span style="color:#D4D4D4;">(ctx, knowledge.QueryReq{</span></span>
<span class="line"><span style="color:#D4D4D4;">        Text: req.Prompt,</span></span>
<span class="line"><span style="color:#D4D4D4;">        Top:  </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Process results...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_7-2-through-dependency-injection" tabindex="-1"><a class="header-anchor" href="#_7-2-through-dependency-injection" aria-hidden="true">#</a> 7.2 Through Dependency Injection</h3><p>A more recommended approach is to use dependency injection, which can make the coupling between modules looser:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Register service in the plugin/plugin.go file of the knowledge base module</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    plugin.</span><span style="color:#DCDCAA;">RegisterServicePlugin</span><span style="color:#D4D4D4;">(&amp;ModuleKnowledgePlugin{})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    do.Provide[service.ModuleKnowledge](</span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(injector *do.Injector) (service.ModuleKnowledge, </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// Initialize database...</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewModuleKnowledge</span><span style="color:#D4D4D4;">(conf)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> svc, </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Use dependency injection to get service in the chat module</span></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;github.com/samber/do&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    know </span><span style="color:#CE9178;">&quot;go-doudou-rag/module-knowledge&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleChatImpl) </span><span style="color:#DCDCAA;">Chat</span><span style="color:#D4D4D4;">(ctx context.Context, req dto.ChatRequest) (err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Use dependency injection to get knowledge base service</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">knowService</span><span style="color:#D4D4D4;"> := do.MustInvoke[know.ModuleKnowledge](</span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">queryResults</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := knowService.</span><span style="color:#DCDCAA;">GetQuery</span><span style="color:#D4D4D4;">(ctx, know.QueryReq{</span></span>
<span class="line"><span style="color:#D4D4D4;">        Text: req.Prompt,</span></span>
<span class="line"><span style="color:#D4D4D4;">        Top:  </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Process results...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="_8-configuration-management" tabindex="-1"><a class="header-anchor" href="#_8-configuration-management" aria-hidden="true">#</a> 8. Configuration Management</h2><p>go-doudou microkernel architecture applications use a layered configuration management approach, combining configuration files and environment variables.</p><h3 id="_8-1-creating-a-central-configuration-file" tabindex="-1"><a class="header-anchor" href="#_8-1-creating-a-central-configuration-file" aria-hidden="true">#</a> 8.1 Creating a Central Configuration File</h3><p>Create an <code>app.yml</code> file in the workspace root directory:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">toolkit</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">auth</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">jwt-secret</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;my-jwt-secret&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">jwt-expires-in</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;12h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">moduleauth</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">db</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#6A9955;">#    dsn: &quot;:memory:&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">dsn</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;/Users/wubin1989/workspace/cloud/unionj-cloud/go-doudou-rag/data/auth.db&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">moduleknowledge</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">biz</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">file-save-path</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;/Users/wubin1989/workspace/cloud/unionj-cloud/go-doudou-rag/data/files&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">vector-store</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">export-to-file</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;/Users/wubin1989/workspace/cloud/unionj-cloud/go-doudou-rag/data/chromem-go.gob&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">db</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">dsn</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;/Users/wubin1989/workspace/cloud/unionj-cloud/go-doudou-rag/data/knowledge.db&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">openai</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">base-url</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;https://api.siliconflow.cn/v1&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">token</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">embedding-model</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;BAAI/bge-large-zh-v1.5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">modulechat</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">openai</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">base-url</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;https://api.siliconflow.cn/v1&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">token</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">embedding-model</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;BAAI/bge-large-zh-v1.5&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">model</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Qwen/Qwen2.5-32B-Instruct&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="_8-2-environment-variable-override" tabindex="-1"><a class="header-anchor" href="#_8-2-environment-variable-override" aria-hidden="true">#</a> 8.2 Environment Variable Override</h3><p>go-doudou allows overriding values in configuration files through environment variables:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># JWT secret</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> TOOLKIT_AUTH_JWTSECRET=</span><span style="color:#CE9178;">&quot;awesome-jwt-secret&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># JWT expiration time</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> TOOLKIT_AUTH_JWTEXPIRESIN=</span><span style="color:#CE9178;">&quot;24h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Database connection string</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> MODULEAUTH_DB_DSN=</span><span style="color:#CE9178;">&quot;/data/production/auth.db&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>The rule for constructing environment variable names is: module prefix (uppercase) + underscore + configuration path (uppercase, separated by underscores). Hyphens in YAML format configuration should be removed in environment variables.</p><p>Usage example:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">TOOLKIT_AUTH_JWTEXPIRESIN=24h TOOLKIT_AUTH_JWTSECRET=awesome-jwt-secret go run cmd/main.go
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_9-running-and-testing" tabindex="-1"><a class="header-anchor" href="#_9-running-and-testing" aria-hidden="true">#</a> 9. Running and Testing</h2><h3 id="_9-1-running-the-entire-application" tabindex="-1"><a class="header-anchor" href="#_9-1-running-the-entire-application" aria-hidden="true">#</a> 9.1 Running the Entire Application</h3><p>Execute in the workspace root directory:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> main</span></span>
<span class="line"><span style="color:#D4D4D4;">go run cmd/main.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This will start the main program, loading all registered plugin modules.</p><h3 id="_9-2-running-individual-modules-independently-for-development" tabindex="-1"><a class="header-anchor" href="#_9-2-running-individual-modules-independently-for-development" aria-hidden="true">#</a> 9.2 Running Individual Modules Independently (for Development)</h3><p>Each module can run independently, which is very useful during development:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> module-auth</span></span>
<span class="line"><span style="color:#D4D4D4;">go run cmd/main.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>When running independently, the module will start its own HTTP server without loading other modules. When you need to expand to a microservice architecture in the future, you can easily implement architecture upgrades.</p><h3 id="_9-3-generating-api-documentation" tabindex="-1"><a class="header-anchor" href="#_9-3-generating-api-documentation" aria-hidden="true">#</a> 9.3 Generating API Documentation</h3><p>go-doudou automatically generates OpenAPI 3.0 specification documentation for each module, which can be accessed via the following URLs:</p><ul><li>Main application (documentation home page): <code>http://localhost:6060/go-doudou/doc</code></li><li>Authentication module: <code>http://localhost:6060/moduleauth/go-doudou/doc</code></li><li>Knowledge base module: <code>http://localhost:6060/modulechat/go-doudou/doc</code></li><li>Chat module: <code>http://localhost:6060/moduleknowledge/go-doudou/doc</code></li></ul>`,106),u=s("For details on how to customize OpenAPI 3.0 specification documentation, please refer to the "),y={href:"https://go-doudou.github.io/guide/idl.html",target:"_blank",rel:"noopener noreferrer"},d=s("Interface Definition"),b=s(" section of the go-doudou official documentation."),m=a(`<h2 id="_10-best-practices" tabindex="-1"><a class="header-anchor" href="#_10-best-practices" aria-hidden="true">#</a> 10. Best Practices</h2><ol><li><strong>Module Division</strong>: Divide modules according to business domains, ensuring each module has clear responsibility boundaries</li><li><strong>Interface First</strong>: Define service interfaces first, then implement business logic</li><li><strong>Dependency Injection</strong>: Use dependency injection to manage service instances, reducing hard-coded dependencies</li><li><strong>Configuration Externalization</strong>: Externalize all configuration parameters for easy deployment in different environments</li><li><strong>Independent Testing</strong>: Each module should be independently testable, reducing dependency complexity</li><li><strong>Version Management</strong>: Define clear version strategies for modules, especially when interfaces between modules change</li><li><strong>Error Handling</strong>: Modules should handle errors properly internally, avoiding exposing underlying errors directly to callers</li></ol><h2 id="_11-advanced-features" tabindex="-1"><a class="header-anchor" href="#_11-advanced-features" aria-hidden="true">#</a> 11. Advanced Features</h2><h3 id="_11-1-custom-plugin-registration" tabindex="-1"><a class="header-anchor" href="#_11-1-custom-plugin-registration" aria-hidden="true">#</a> 11.1 Custom Plugin Registration</h3><p>Sometimes we need more fine-grained control over the plugin initialization process:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *ModuleChatPlugin) </span><span style="color:#DCDCAA;">Initialize</span><span style="color:#D4D4D4;">(restServer *rest.RestServer, grpcServer *grpcx.GrpcServer, dialCtx pipeconn.DialContextFunc) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewModuleChat</span><span style="color:#D4D4D4;">(conf)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">routes</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">NewModuleChatHandler</span><span style="color:#D4D4D4;">(svc))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// httpsrv.InjectResponseWriter is a custom route middleware that applies to a group of routes starting with /modulechat</span></span>
<span class="line"><span style="color:#D4D4D4;">	restServer.</span><span style="color:#DCDCAA;">GroupRoutes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/modulechat&quot;</span><span style="color:#D4D4D4;">, routes, httpsrv.InjectResponseWriter)</span></span>
<span class="line"><span style="color:#D4D4D4;">	restServer.</span><span style="color:#DCDCAA;">GroupRoutes</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/modulechat&quot;</span><span style="color:#D4D4D4;">, rest.</span><span style="color:#DCDCAA;">DocRoutes</span><span style="color:#D4D4D4;">(service.Oas))</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_11-2-custom-service-registration" tabindex="-1"><a class="header-anchor" href="#_11-2-custom-service-registration" aria-hidden="true">#</a> 11.2 Custom Service Registration</h3><p>Different scopes can be used when injecting dependencies:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Singleton mode</span></span>
<span class="line"><span style="color:#D4D4D4;">do.Provide[service.ModuleKnowledge](</span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(injector *do.Injector) (service.ModuleKnowledge, </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Request scope (create a new instance for each request)</span></span>
<span class="line"><span style="color:#D4D4D4;">do.ProvideNamed[service.ModuleKnowledge](</span><span style="color:#CE9178;">&quot;request&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(injector *do.Injector) (service.ModuleKnowledge, </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Using named injection</span></span>
<span class="line"><span style="color:#9CDCFE;">knowService</span><span style="color:#D4D4D4;"> := do.MustInvokeNamed[know.ModuleKnowledge](</span><span style="color:#CE9178;">&quot;request&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><p>Through this detailed guide, we have demonstrated how to build a microkernel architecture application from scratch using go-doudou. This architectural pattern has a high degree of modularity and extensibility, making it very suitable for the development of microkernel systems and large applications.</p><p>The CLI tools and plugin mechanism of go-doudou greatly simplify the implementation of microkernel architecture, allowing developers to focus on business logic without worrying too much about building infrastructure. By following the development process and best practices introduced in this article, you can quickly master the method of building microkernel architecture applications based on go-doudou.</p><p>Currently, the usage method is based on command line or postman. In &quot;go-doudou + langchaingo Microkernel Architecture RAG Large Language Model Knowledge Base Practice (Part 3)&quot;, we will add a conversation interface implemented based on Vue 3, and package and compile front-end resources into the chat module, achieving full-stack development and lightweight deployment.</p>`,13);function C(g,h){const l=e("ExternalLinkIcon");return p(),o(c,null,[i,n("p",null,[u,n("a",y,[d,r(l)]),b]),m],64)}var v=t(D,[["render",C]]);export{v as default};
