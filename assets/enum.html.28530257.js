import{g as s}from"./app.2025f35b.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const a={},e=s(`<h1 id="go-doudou-s-enum-command" tabindex="-1"><a class="header-anchor" href="#go-doudou-s-enum-command" aria-hidden="true">#</a> go-doudou&#39;s Enum Command</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>The <code>enum</code> command is a powerful tool in the go-doudou framework that helps generate type-safe enum implementations in Go. As we know, Go doesn&#39;t have a built-in enum type like other languages such as Java, C#, or TypeScript. The <code>enum</code> command addresses this limitation by providing a way to define and use enums in a type-safe manner in your Go projects.</p><h2 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h2><p>To use the <code>enum</code> command, first define your enum types using Go structs tagged with appropriate annotations. Then run the <code>go-doudou enum</code> command to generate the implementation code.</p><h3 id="step-1-define-your-enum-types" tabindex="-1"><a class="header-anchor" href="#step-1-define-your-enum-types" aria-hidden="true">#</a> Step 1: Define Your Enum Types</h3><p>Create a file, for example <code>enums.go</code>, with struct definitions for your enums:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> enums</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//go:generate go-doudou enum</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Gender represents gender types</span></span>
<span class="line"><span style="color:#6A9955;">// @enum</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Gender</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value</span></span>
<span class="line"><span style="color:#D4D4D4;">	Male </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value</span></span>
<span class="line"><span style="color:#D4D4D4;">	Female </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Color represents color types</span></span>
<span class="line"><span style="color:#6A9955;">// @enum</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Color</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value red</span></span>
<span class="line"><span style="color:#D4D4D4;">	Red </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value green</span></span>
<span class="line"><span style="color:#D4D4D4;">	Green </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value blue</span></span>
<span class="line"><span style="color:#D4D4D4;">	Blue </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Status represents status types</span></span>
<span class="line"><span style="color:#6A9955;">// @enum</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Status</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 1 Active status</span></span>
<span class="line"><span style="color:#D4D4D4;">	Active </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 2 Inactive status</span></span>
<span class="line"><span style="color:#D4D4D4;">	Inactive </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 3 Pending status</span></span>
<span class="line"><span style="color:#D4D4D4;">	Pending </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="step-2-generate-the-enum-implementation" tabindex="-1"><a class="header-anchor" href="#step-2-generate-the-enum-implementation" aria-hidden="true">#</a> Step 2: Generate the Enum Implementation</h3><p>Run the enum command in the directory containing your enum definitions:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou enum</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This will generate a file named <code>generated.go</code> in the same directory with all the necessary enum implementations.</p><h2 id="annotations" tabindex="-1"><a class="header-anchor" href="#annotations" aria-hidden="true">#</a> Annotations</h2><p>The <code>enum</code> command uses annotations to identify and process the enum types:</p><ul><li><code>// @enum</code>: Marks a struct as an enum type.</li><li><code>// @value</code>: Marks a field as an enum value.</li><li><code>// @value &lt;literal_value&gt;</code>: Specifies a custom literal value for the enum value.</li><li><code>// @value &lt;literal_value&gt; &lt;description&gt;</code>: Adds a description to the enum value.</li></ul><h2 id="generated-code" tabindex="-1"><a class="header-anchor" href="#generated-code" aria-hidden="true">#</a> Generated Code</h2><p>The generated code includes:</p><ol><li>Constants for each enum value</li><li>Functions to convert between enum values and string representations</li><li>Methods to check if a value is valid for the enum type</li><li>JSON marshaling and unmarshaling support</li><li>String method for better readability</li></ol><p>For example, for the <code>Gender</code> enum defined above, the generated code will include:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">GenderMale</span><span style="color:#D4D4D4;">   = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">GenderFemale</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (e Gender) </span><span style="color:#DCDCAA;">String</span><span style="color:#D4D4D4;">() </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> e.Value {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> GenderMale:</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Male&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> GenderFemale:</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Female&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> fmt.</span><span style="color:#DCDCAA;">Sprintf</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Gender(</span><span style="color:#9CDCFE;">%d</span><span style="color:#CE9178;">)&quot;</span><span style="color:#D4D4D4;">, e.Value)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Additional methods...</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="using-enums-in-your-code" tabindex="-1"><a class="header-anchor" href="#using-enums-in-your-code" aria-hidden="true">#</a> Using Enums in Your Code</h2><p>After generating the enum implementation, you can use the enums in your code like this:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;yourmodule/enums&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Creating enum values</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">gender</span><span style="color:#D4D4D4;"> := enums.Gender{Value: enums.GenderMale}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">color</span><span style="color:#D4D4D4;"> := enums.Color{Value: enums.ColorRed}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// String representation</span></span>
<span class="line"><span style="color:#D4D4D4;">	fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(gender.</span><span style="color:#DCDCAA;">String</span><span style="color:#D4D4D4;">()) </span><span style="color:#6A9955;">// Outputs: Male</span></span>
<span class="line"><span style="color:#D4D4D4;">	fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(color.</span><span style="color:#DCDCAA;">String</span><span style="color:#D4D4D4;">())  </span><span style="color:#6A9955;">// Outputs: red</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Checking if a value is valid</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">invalidGender</span><span style="color:#D4D4D4;"> := enums.Gender{Value: </span><span style="color:#B5CEA8;">999</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">	fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(invalidGender.</span><span style="color:#DCDCAA;">IsValid</span><span style="color:#D4D4D4;">()) </span><span style="color:#6A9955;">// Outputs: false</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// JSON marshaling</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">jsonData</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> := json.</span><span style="color:#DCDCAA;">Marshal</span><span style="color:#D4D4D4;">(gender)</span></span>
<span class="line"><span style="color:#D4D4D4;">	fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">(jsonData)) </span><span style="color:#6A9955;">// Outputs: {&quot;Value&quot;:0}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Using enum in switch statement</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> gender.Value {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> enums.GenderMale:</span></span>
<span class="line"><span style="color:#D4D4D4;">		fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;This is a male&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> enums.GenderFemale:</span></span>
<span class="line"><span style="color:#D4D4D4;">		fmt.</span><span style="color:#DCDCAA;">Println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;This is a female&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="advanced-features" tabindex="-1"><a class="header-anchor" href="#advanced-features" aria-hidden="true">#</a> Advanced Features</h2><h3 id="custom-value-types" tabindex="-1"><a class="header-anchor" href="#custom-value-types" aria-hidden="true">#</a> Custom Value Types</h3><p>The <code>enum</code> command supports various types for enum values:</p><ul><li><code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code></li><li><code>uint</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code></li><li><code>string</code></li><li><code>float32</code>, <code>float64</code></li><li><code>bool</code></li></ul><h3 id="custom-literal-values" tabindex="-1"><a class="header-anchor" href="#custom-literal-values" aria-hidden="true">#</a> Custom Literal Values</h3><p>You can specify custom literal values for enum constants:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// @enum</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PaymentType</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value &quot;credit_card&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	CreditCard </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value &quot;debit_card&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	DebitCard </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value &quot;bank_transfer&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	BankTransfer </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>This will generate constants with the specified values:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">PaymentTypeCreditCard</span><span style="color:#D4D4D4;">   = </span><span style="color:#CE9178;">&quot;credit_card&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">PaymentTypeDebitCard</span><span style="color:#D4D4D4;">    = </span><span style="color:#CE9178;">&quot;debit_card&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">PaymentTypeBankTransfer</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;bank_transfer&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="enum-value-descriptions" tabindex="-1"><a class="header-anchor" href="#enum-value-descriptions" aria-hidden="true">#</a> Enum Value Descriptions</h3><p>You can add descriptions to enum values for better documentation:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// @enum</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">OrderStatus</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 1 Order has been created but not processed</span></span>
<span class="line"><span style="color:#D4D4D4;">	Created </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 2 Order is being processed</span></span>
<span class="line"><span style="color:#D4D4D4;">	Processing </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 3 Order has been shipped</span></span>
<span class="line"><span style="color:#D4D4D4;">	Shipped </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 4 Order has been delivered</span></span>
<span class="line"><span style="color:#D4D4D4;">	Delivered </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @value 5 Order has been cancelled</span></span>
<span class="line"><span style="color:#D4D4D4;">	Cancelled </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>The descriptions will be included in the generated documentation and can be accessed programmatically.</p><h2 id="benefits-of-using-the-enum-command" tabindex="-1"><a class="header-anchor" href="#benefits-of-using-the-enum-command" aria-hidden="true">#</a> Benefits of Using the Enum Command</h2><ol><li><strong>Type Safety</strong>: Enforces correct enum values at compile time.</li><li><strong>JSON Serialization</strong>: Built-in support for JSON marshaling and unmarshaling.</li><li><strong>String Representation</strong>: Automatic conversion between enum values and strings.</li><li><strong>Documentation</strong>: Automatically includes descriptions in generated code.</li><li><strong>Code Reuse</strong>: Generates repetitive code automatically, reducing boilerplate.</li></ol><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>The <code>enum</code> command in go-doudou provides a powerful way to implement type-safe enums in Go, addressing one of the language&#39;s limitations. By using simple annotations and code generation, you can have all the benefits of enumeration types while maintaining the Go idioms and style.</p>`,40);function l(p,o){return e}var c=n(a,[["render",l]]);export{c as default};
