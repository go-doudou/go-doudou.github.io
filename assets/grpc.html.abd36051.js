import{r as p,o,a as r,b as n,e as l,F as t,g as a,f as s}from"./app.2025f35b.js";import{_ as c}from"./elk.d2b0578e.js";import{_ as D,a as i}from"./jaeger4.d72e0db9.js";import{_ as y}from"./plugin-vue_export-helper.21dcd24c.js";const b={},u=a(`<h1 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> gRPC</h1><h2 id="service-registration-and-discovery" tabindex="-1"><a class="header-anchor" href="#service-registration-and-discovery" aria-hidden="true">#</a> Service Registration and Discovery</h2><p><code>go-doudou</code> supports two service registration and discovery mechanisms: <code>etcd</code> and <code>nacos</code>. REST services registered in the registry will automatically have the <code>_rest</code> suffix added to their service name, and gRPC services will have the <code>_grpc</code> suffix, to distinguish between them.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>The <code>etcd</code> and <code>nacos</code> mechanisms can be used simultaneously in one service</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_DISCOVERY_MODE=etcd,nacos</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><h3 id="etcd" tabindex="-1"><a class="header-anchor" href="#etcd" aria-hidden="true">#</a> Etcd</h3><p><code>go-doudou</code> has built-in support for using etcd as a registry center for service registration and discovery since v2. The following environment variables need to be configured:</p><ul><li><code>GDD_SERVICE_NAME</code>: Service name, required</li><li><code>GDD_SERVICE_DISCOVERY_MODE</code>: Service registration and discovery mechanism name, <code>etcd</code>, required</li><li><code>GDD_ETCD_ENDPOINTS</code>: etcd connection address, required</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_NAME=grpcdemo-server</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_DISCOVERY_MODE=etcd</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_ETCD_ENDPOINTS=localhost:2379</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos" aria-hidden="true">#</a> Nacos</h3><p><code>go-doudou</code> has built-in support for using Alibaba&#39;s Nacos as a registry center for service registration and discovery. The following environment variables need to be configured:</p><ul><li><code>GDD_SERVICE_NAME</code>: Service name, required</li><li><code>GDD_NACOS_SERVER_ADDR</code>: Nacos server address, required</li><li><code>GDD_SERVICE_DISCOVERY_MODE</code>: Service discovery mechanism name, required</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_NAME=test-svc </span><span style="color:#6A9955;"># Required</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_NACOS_SERVER_ADDR=http://localhost:8848/nacos </span><span style="color:#6A9955;"># Required</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_DISCOVERY_MODE=nacos </span><span style="color:#6A9955;"># Required</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper" aria-hidden="true">#</a> Zookeeper</h3><p><code>go-doudou</code> has built-in support for using Zookeeper as a registry center for service registration and discovery. The following environment variables need to be configured:</p><ul><li><code>GDD_SERVICE_NAME</code>: Service name, required</li><li><code>GDD_SERVICE_DISCOVERY_MODE</code>: Service discovery mechanism name, required</li><li><code>GDD_ZK_SERVERS</code>: Zookeeper server address, required</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_NAME=cloud.unionj.ServiceB </span><span style="color:#6A9955;"># Required</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_DISCOVERY_MODE=zk </span><span style="color:#6A9955;"># Required</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_ZK_SERVERS=localhost:2181 </span><span style="color:#6A9955;"># Required</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_ZK_DIRECTORY_PATTERN=/dubbo/%s/providers</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_GROUP=group</span></span>
<span class="line"><span style="color:#D4D4D4;">GDD_SERVICE_VERSION=v2.2.2</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="client-side-load-balancing" tabindex="-1"><a class="header-anchor" href="#client-side-load-balancing" aria-hidden="true">#</a> Client-side Load Balancing</h2><h3 id="simple-round-robin-load-balancing-for-etcd" tabindex="-1"><a class="header-anchor" href="#simple-round-robin-load-balancing-for-etcd" aria-hidden="true">#</a> Simple Round Robin Load Balancing (For Etcd)</h3><p>You need to call <code>etcd.NewRRGrpcClientConn(&quot;service name registered in etcd&quot;, tlsOption)</code> to create a <code>*grpc.ClientConn</code> instance.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the etcd client before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> etcd.</span><span style="color:#DCDCAA;">CloseEtcdClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Create a gRPC connection that supports etcd simple round robin load balancing mechanism</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := etcd.</span><span style="color:#DCDCAA;">NewRRGrpcClientConn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;grpcdemo-server_grpc&quot;</span><span style="color:#D4D4D4;">, tlsOption)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the gRPC connection before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewEnumDemo</span><span style="color:#D4D4D4;">(conf, pb.</span><span style="color:#DCDCAA;">NewHelloworldServiceClient</span><span style="color:#D4D4D4;">(grpcConn),</span></span>
<span class="line"><span style="color:#D4D4D4;">		client.</span><span style="color:#DCDCAA;">NewHelloworldClient</span><span style="color:#D4D4D4;">(ddclient.</span><span style="color:#DCDCAA;">WithClient</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">newClient</span><span style="color:#D4D4D4;">()), ddclient.</span><span style="color:#DCDCAA;">WithProvider</span><span style="color:#D4D4D4;">(restProvider)))</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">NewEnumDemoHandler</span><span style="color:#D4D4D4;">(svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">AddRoute</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(handler)...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="smooth-weighted-round-robin-load-balancing-for-etcd" tabindex="-1"><a class="header-anchor" href="#smooth-weighted-round-robin-load-balancing-for-etcd" aria-hidden="true">#</a> Smooth Weighted Round Robin Load Balancing (For Etcd)</h3><p>You need to call <code>etcd.NewSWRRGrpcClientConn(&quot;service name registered in etcd&quot;, tlsOption)</code> to create a <code>*grpc.ClientConn</code> instance.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the etcd client before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> etcd.</span><span style="color:#DCDCAA;">CloseEtcdClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Create a gRPC connection that supports etcd smooth weighted round robin load balancing mechanism (SWRR)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := etcd.</span><span style="color:#DCDCAA;">NewSWRRGrpcClientConn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;grpcdemo-server_grpc&quot;</span><span style="color:#D4D4D4;">, tlsOption)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the gRPC connection before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewEnumDemo</span><span style="color:#D4D4D4;">(conf, pb.</span><span style="color:#DCDCAA;">NewHelloworldServiceClient</span><span style="color:#D4D4D4;">(grpcConn))</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">NewEnumDemoHandler</span><span style="color:#D4D4D4;">(svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">AddRoute</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(handler)...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="simple-round-robin-load-balancing-for-nacos" tabindex="-1"><a class="header-anchor" href="#simple-round-robin-load-balancing-for-nacos" aria-hidden="true">#</a> Simple Round Robin Load Balancing (For Nacos)</h3><p>Call the <code>nacos.NewRRGrpcClientConn</code> method to create a gRPC connection.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the nacos client before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> nacos.</span><span style="color:#DCDCAA;">CloseNamingClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Create a gRPC connection that supports nacos simple round robin load balancing mechanism</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := nacos.</span><span style="color:#DCDCAA;">NewRRGrpcClientConn</span><span style="color:#D4D4D4;">(nacos.NacosConfig{</span></span>
<span class="line"><span style="color:#D4D4D4;">		ServiceName: </span><span style="color:#CE9178;">&quot;grpcdemo-server_grpc&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}, tlsOption)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the gRPC connection before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewEnumDemo</span><span style="color:#D4D4D4;">(conf, pb.</span><span style="color:#DCDCAA;">NewHelloworldServiceClient</span><span style="color:#D4D4D4;">(grpcConn))</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">NewEnumDemoHandler</span><span style="color:#D4D4D4;">(svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">AddRoute</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(handler)...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="weighted-round-robin-load-balancing-for-nacos" tabindex="-1"><a class="header-anchor" href="#weighted-round-robin-load-balancing-for-nacos" aria-hidden="true">#</a> Weighted Round Robin Load Balancing (For Nacos)</h3><p>Call the <code>nacos.NewWRRGrpcClientConn</code> method to create a gRPC connection.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the nacos client before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> nacos.</span><span style="color:#DCDCAA;">CloseNamingClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Create a gRPC connection that supports nacos weighted round robin load balancing mechanism</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := nacos.</span><span style="color:#DCDCAA;">NewWRRGrpcClientConn</span><span style="color:#D4D4D4;">(nacos.NacosConfig{</span></span>
<span class="line"><span style="color:#D4D4D4;">		ServiceName: </span><span style="color:#CE9178;">&quot;grpcdemo-server_grpc&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}, tlsOption)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Need to close the gRPC connection before the program exits</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewEnumDemo</span><span style="color:#D4D4D4;">(conf, pb.</span><span style="color:#DCDCAA;">NewHelloworldServiceClient</span><span style="color:#D4D4D4;">(grpcConn))</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">NewEnumDemoHandler</span><span style="color:#D4D4D4;">(svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">AddRoute</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(handler)...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="simple-round-robin-load-balancing-for-zookeeper" tabindex="-1"><a class="header-anchor" href="#simple-round-robin-load-balancing-for-zookeeper" aria-hidden="true">#</a> Simple Round Robin Load Balancing (For Zookeeper)</h3><p>Call the <code>zk.NewRRGrpcClientConn</code> method to create a gRPC connection.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	...</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">opts</span><span style="color:#D4D4D4;"> := []grpc_retry.CallOption{</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc_retry.</span><span style="color:#DCDCAA;">WithBackoff</span><span style="color:#D4D4D4;">(grpc_retry.</span><span style="color:#DCDCAA;">BackoffLinear</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;"> * time.Millisecond)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc_retry.</span><span style="color:#DCDCAA;">WithCodes</span><span style="color:#D4D4D4;">(codes.NotFound, codes.Aborted),</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">dialOptions</span><span style="color:#D4D4D4;"> := []grpc.DialOption{</span></span>
<span class="line"><span style="color:#D4D4D4;">		tlsOption,</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">WithStreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">StreamClientInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_retry.</span><span style="color:#DCDCAA;">StreamClientInterceptor</span><span style="color:#D4D4D4;">(opts...),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">WithUnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">UnaryClientInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_retry.</span><span style="color:#DCDCAA;">UnaryClientInterceptor</span><span style="color:#D4D4D4;">(opts...),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Set up a connection to the server.</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := zk.</span><span style="color:#DCDCAA;">NewRRGrpcClientConn</span><span style="color:#D4D4D4;">(zk.ServiceConfig{</span></span>
<span class="line"><span style="color:#D4D4D4;">		Name:    </span><span style="color:#CE9178;">&quot;cloud.unionj.ServiceB_grpc&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		Group:   </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		Version: </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}, dialOptions...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="weighted-round-robin-load-balancing-for-zookeeper" tabindex="-1"><a class="header-anchor" href="#weighted-round-robin-load-balancing-for-zookeeper" aria-hidden="true">#</a> Weighted Round Robin Load Balancing (For Zookeeper)</h3><p>Call the <code>zk.NewSWRRGrpcClientConn</code> method to create a gRPC connection.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	...</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">opts</span><span style="color:#D4D4D4;"> := []grpc_retry.CallOption{</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc_retry.</span><span style="color:#DCDCAA;">WithBackoff</span><span style="color:#D4D4D4;">(grpc_retry.</span><span style="color:#DCDCAA;">BackoffLinear</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;"> * time.Millisecond)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc_retry.</span><span style="color:#DCDCAA;">WithCodes</span><span style="color:#D4D4D4;">(codes.NotFound, codes.Aborted),</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">dialOptions</span><span style="color:#D4D4D4;"> := []grpc.DialOption{</span></span>
<span class="line"><span style="color:#D4D4D4;">		tlsOption,</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">WithStreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">StreamClientInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_retry.</span><span style="color:#DCDCAA;">StreamClientInterceptor</span><span style="color:#D4D4D4;">(opts...),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">WithUnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">UnaryClientInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_retry.</span><span style="color:#DCDCAA;">UnaryClientInterceptor</span><span style="color:#D4D4D4;">(opts...),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Set up a connection to the server.</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := zk.</span><span style="color:#DCDCAA;">NewSWRRGrpcClientConn</span><span style="color:#D4D4D4;">(zk.ServiceConfig{</span></span>
<span class="line"><span style="color:#D4D4D4;">		Name:    </span><span style="color:#CE9178;">&quot;cloud.unionj.ServiceB_grpc&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		Group:   </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		Version: </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}, dialOptions...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewServiceA</span><span style="color:#D4D4D4;">(conf, bClient, pb.</span><span style="color:#DCDCAA;">NewServiceBServiceClient</span><span style="color:#D4D4D4;">(grpcConn))</span></span>
<span class="line"><span style="color:#D4D4D4;">	...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="authentication-and-authorization" tabindex="-1"><a class="header-anchor" href="#authentication-and-authorization" aria-hidden="true">#</a> Authentication and Authorization</h2><p><code>go-doudou</code> has built-in interceptors <code>grpcx_auth.UnaryServerInterceptor</code> and <code>grpcx_auth.StreamServerInterceptor</code> for login authorization in the <code>framework/grpcx/interceptors/grpcx_auth</code> package, as well as the <code>grpcx_auth.Authorizer</code> interface. Developers can implement their own <code>grpcx_auth.Authorizer</code> interface. Below is a usage example:</p><h3 id="interface-definition" tabindex="-1"><a class="header-anchor" href="#interface-definition" aria-hidden="true">#</a> Interface Definition</h3><p>Note the <code>@role</code> annotation above the interface method definition. For <code>go-doudou</code> annotation usage, please refer to the relevant section in the official documentation: &quot;Guide-&gt;Interface Definition-&gt;Annotations-&gt;Usage in gRPC Services&quot;.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> service</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//go:generate go-doudou svc http</span></span>
<span class="line"><span style="color:#6A9955;">//go:generate go-doudou svc grpc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Annotation</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// This interface is publicly accessible, no need to check login and permissions</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetGuest</span><span style="color:#D4D4D4;">(ctx context.Context) (data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// This interface is only accessible to logged-in users</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @role(USER,ADMIN)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetUser</span><span style="color:#D4D4D4;">(ctx context.Context) (data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// This interface is only accessible to administrators</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// @role(ADMIN)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#DCDCAA;">GetAdmin</span><span style="color:#D4D4D4;">(ctx context.Context) (data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="grpcx-auth-authorizer-interface-implementation" tabindex="-1"><a class="header-anchor" href="#grpcx-auth-authorizer-interface-implementation" aria-hidden="true">#</a> grpcx_auth.Authorizer Interface Implementation</h3><p>Below is an example of a custom <code>grpcx_auth.Authorizer</code> interface implementation based on HTTP basic authentication:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> grpc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;annotation/vo&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;context&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;encoding/base64&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpc_auth </span><span style="color:#CE9178;">&quot;github.com/grpc-ecosystem/go-grpc-middleware/auth&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/framework/grpcx/interceptors/grpcx_auth&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;github.com/unionj-cloud/go-doudou/v2/toolkit/sliceutils&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;strings&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;google.golang.org/grpc/codes&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#CE9178;">&quot;google.golang.org/grpc/status&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Ensure that AuthInterceptor struct implements grpcx_auth.Authorizer interface</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> grpcx_auth.Authorizer = (*AuthInterceptor)(</span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// AuthInterceptor is an implementation of the grpcx_auth.Authorizer interface</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AuthInterceptor</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// For simplicity, we use an in-memory data structure to simulate a database user role table,</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// but in a real project, you would typically define a database connection instance as a member variable,</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// using a real database to query user tables, role tables, permission tables, etc.</span></span>
<span class="line"><span style="color:#D4D4D4;">	userStore vo.UserStore</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// NewAuthInterceptor is a factory method to create an AuthInterceptor struct instance</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">NewAuthInterceptor</span><span style="color:#D4D4D4;">(userStore vo.UserStore) *AuthInterceptor {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> &amp;AuthInterceptor{</span></span>
<span class="line"><span style="color:#D4D4D4;">		userStore: userStore,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Parse HTTP basic token, return username and password</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">parseToken</span><span style="color:#D4D4D4;">(token </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) (username, password </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, ok </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := base64.StdEncoding.</span><span style="color:#DCDCAA;">DecodeString</span><span style="color:#D4D4D4;">(token)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">cs</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">(c)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">password</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> = strings.</span><span style="color:#DCDCAA;">Cut</span><span style="color:#D4D4D4;">(cs, </span><span style="color:#CE9178;">&quot;:&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> !ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> username, password, </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Authorize method implements the grpcx_auth.Authorizer interface</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (interceptor *AuthInterceptor) </span><span style="color:#DCDCAA;">Authorize</span><span style="color:#D4D4D4;">(ctx context.Context, fullMethod </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) (context.Context, </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">method</span><span style="color:#D4D4D4;"> := fullMethod[strings.</span><span style="color:#DCDCAA;">LastIndex</span><span style="color:#D4D4D4;">(fullMethod, </span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">)+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:]</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// For go-doudou annotation usage, please refer to the &quot;Guide-&gt;Interface Definition-&gt;Annotations-&gt;Usage in gRPC Services&quot; section in the official documentation</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// If the gRPC method definition does not have the @role annotation, it means it can be publicly accessed without authentication, so let it pass directly</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> !MethodAnnotationStore.</span><span style="color:#DCDCAA;">HasAnnotation</span><span style="color:#D4D4D4;">(method, </span><span style="color:#CE9178;">&quot;@role&quot;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> ctx, </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// This depends on the auth package from the third-party open-source library github.com/grpc-ecosystem/go-grpc-middleware</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Extract the HTTP basic token from metadata</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">token</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;"> := grpc_auth.</span><span style="color:#DCDCAA;">AuthFromMD</span><span style="color:#D4D4D4;">(ctx, </span><span style="color:#CE9178;">&quot;Basic&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> ctx, err</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Parse the HTTP basic token, returning username and password</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">pass</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := </span><span style="color:#DCDCAA;">parseToken</span><span style="color:#D4D4D4;">(token)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> !ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> ctx, status.</span><span style="color:#DCDCAA;">Error</span><span style="color:#D4D4D4;">(codes.Unauthenticated, </span><span style="color:#CE9178;">&quot;Provide user name and password&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Find the role of the user through username and password</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">role</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">exists</span><span style="color:#D4D4D4;"> := interceptor.userStore[vo.Auth{user, pass}]</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> !exists {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> ctx, status.</span><span style="color:#DCDCAA;">Error</span><span style="color:#D4D4D4;">(codes.Unauthenticated, </span><span style="color:#CE9178;">&quot;Provide user name and password&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Get the list of roles that can access the gRPC method from MethodAnnotationStore</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;"> := MethodAnnotationStore.</span><span style="color:#DCDCAA;">GetParams</span><span style="color:#D4D4D4;">(method, </span><span style="color:#CE9178;">&quot;@role&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#6A9955;">// Check if the user&#39;s role is included in the role list, if it is, the authentication passes, if not, access is denied</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> !sliceutils.</span><span style="color:#DCDCAA;">StringContains</span><span style="color:#D4D4D4;">(params, role.</span><span style="color:#DCDCAA;">StringGetter</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> ctx, status.</span><span style="color:#DCDCAA;">Error</span><span style="color:#D4D4D4;">(codes.PermissionDenied, </span><span style="color:#CE9178;">&quot;Access denied&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> ctx, </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br></div></div><h3 id="main-function" tabindex="-1"><a class="header-anchor" href="#main-function" aria-hidden="true">#</a> Main Function</h3><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewAnnotation</span><span style="color:#D4D4D4;">(conf)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// In-memory data structure simulating a database user role table</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">userStore</span><span style="color:#D4D4D4;"> := vo.UserStore{</span></span>
<span class="line"><span style="color:#D4D4D4;">		vo.Auth{</span></span>
<span class="line"><span style="color:#D4D4D4;">			User: </span><span style="color:#CE9178;">&quot;guest&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			Pass: </span><span style="color:#CE9178;">&quot;guest&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		}: vo.GUEST,</span></span>
<span class="line"><span style="color:#D4D4D4;">		vo.Auth{</span></span>
<span class="line"><span style="color:#D4D4D4;">			User: </span><span style="color:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			Pass: </span><span style="color:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		}: vo.USER,</span></span>
<span class="line"><span style="color:#D4D4D4;">		vo.Auth{</span></span>
<span class="line"><span style="color:#D4D4D4;">			User: </span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">			Pass: </span><span style="color:#CE9178;">&quot;admin&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		}: vo.ADMIN,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Create a custom implementation of the grpcx_auth.Authorizer interface</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">authorizer</span><span style="color:#D4D4D4;"> := pb.</span><span style="color:#DCDCAA;">NewAuthInterceptor</span><span style="color:#D4D4D4;">(userStore)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcServer</span><span style="color:#D4D4D4;"> := grpcx.</span><span style="color:#DCDCAA;">NewGrpcServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">StreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_ctxtags.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_prometheus.StreamServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">			logging.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// Pass the authorizer to the grpcx_auth interceptor</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpcx_auth.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(authorizer),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_recovery.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">UnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_ctxtags.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_prometheus.UnaryServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">			logging.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#6A9955;">// Pass the authorizer to the grpcx_auth interceptor</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpcx_auth.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(authorizer),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_recovery.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">	)</span></span>
<span class="line"><span style="color:#D4D4D4;">	pb.</span><span style="color:#DCDCAA;">RegisterAnnotationServiceServer</span><span style="color:#D4D4D4;">(grpcServer, svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpcServer.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="rate-limiting" tabindex="-1"><a class="header-anchor" href="#rate-limiting" aria-hidden="true">#</a> Rate Limiting</h2><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3>`,47),C=n("code",null,"go-doudou",-1),d=s(" has built-in memory rate limiters based on the token bucket algorithm implemented with "),m={href:"https://pkg.go.dev/golang.org/x/time/rate",target:"_blank",rel:"noopener noreferrer"},g=s("golang.org/x/time/rate"),A=s("."),h=a("<p>In the <code>github.com/unionj-cloud/go-doudou/v2/framework/ratelimit/memrate</code> package, there is a <code>MemoryStore</code> struct that stores key and <code>Limiter</code> instance pairs. The <code>Limiter</code> instance is a rate limiter instance, and the key is the key for that rate limiter instance.</p><p>You can pass an optional function <code>memrate.WithTimer</code> to the <code>memrate.NewLimiter</code> factory function to set a callback function for when the key&#39;s idle time exceeds <code>timeout</code>, for example, to delete the key from the <code>MemoryStore</code> instance to free up memory resources.</p>",2),v=n("code",null,"go-doudou",-1),E=s(" also provides a redis rate limiter based on the GCRA rate limiting algorithm wrapped with the "),f={href:"https://github.com/go-redis/redis_rate",target:"_blank",rel:"noopener noreferrer"},_=s("go-redis/redis_rate"),S=s(" library. This rate limiter supports cross-instance global rate limiting."),x=a(`<h3 id="memory-rate-limiter-example" tabindex="-1"><a class="header-anchor" href="#memory-rate-limiter-example" aria-hidden="true">#</a> Memory Rate Limiter Example</h3><p>The memory rate limiter is based on local memory and only supports local rate limiting. First, you need to call <code>memrate.NewMemoryStore</code> to create a <code>MemoryStore</code> instance, which stores the keys to be limited and their corresponding rate limiters. Then call <code>grpcx_ratelimit.NewRateLimitInterceptor(grpcx_ratelimit.WithMemoryStore(mstore))</code> to create a <code>grpcx_ratelimit.RateLimitInterceptor</code> interceptor instance. Then you need to customize a structure that implements the <code>grpcx_ratelimit.KeyGetter</code> interface to implement the logic of extracting keys from <code>context.Context</code>. Finally, add the code <code>rl.UnaryServerInterceptor(keyGetter),</code> to the interceptor chain to implement rate limiting. Below is an example of rate limiting client IPs.</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> etcd.</span><span style="color:#DCDCAA;">CloseEtcdClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewHelloworld</span><span style="color:#D4D4D4;">(conf)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">go</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">mstore</span><span style="color:#D4D4D4;"> := memrate.</span><span style="color:#DCDCAA;">NewMemoryStore</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(_ context.Context, store *memrate.MemoryStore, key </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) ratelimit.Limiter {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// Rate limiter creation function, which creates a rate limiter that allows processing 10 requests per second, with a peak of 30 requests, and a maximum idle time of 10 seconds. After being idle for more than 10 seconds, it will be removed from memory to free up memory space.</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// The idle time should be at least greater than 1 / rate * burst to be meaningful, which means it should at least wait until the token bucket is refilled to its initial state.</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> memrate.</span><span style="color:#DCDCAA;">NewLimiter</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">, memrate.</span><span style="color:#DCDCAA;">WithTimer</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">*time.Second, </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">				store.</span><span style="color:#DCDCAA;">DeleteKey</span><span style="color:#D4D4D4;">(key)</span></span>
<span class="line"><span style="color:#D4D4D4;">			}))</span></span>
<span class="line"><span style="color:#D4D4D4;">		})</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">rl</span><span style="color:#D4D4D4;"> := grpcx_ratelimit.</span><span style="color:#DCDCAA;">NewRateLimitInterceptor</span><span style="color:#D4D4D4;">(grpcx_ratelimit.</span><span style="color:#DCDCAA;">WithMemoryStore</span><span style="color:#D4D4D4;">(mstore))</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">keyGetter</span><span style="color:#D4D4D4;"> := &amp;RateLimitKeyGetter{}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">grpcServer</span><span style="color:#D4D4D4;"> := grpcx.</span><span style="color:#DCDCAA;">NewGrpcServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc.</span><span style="color:#DCDCAA;">StreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// In this example, the grpc_ctxtags interceptor must be added, which automatically adds the RPC caller&#39;s &quot;peer.address&quot; information to the context.Context</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_ctxtags.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_opentracing.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_prometheus.StreamServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">				logging.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">				rl.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(keyGetter),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_recovery.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			)),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc.</span><span style="color:#DCDCAA;">UnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// In this example, the grpc_ctxtags interceptor must be added, which automatically adds the RPC caller&#39;s &quot;peer.address&quot; information to the context.Context</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_ctxtags.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_opentracing.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_prometheus.UnaryServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">				logging.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">				rl.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(keyGetter),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_recovery.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)</span></span>
<span class="line"><span style="color:#D4D4D4;">		pb.</span><span style="color:#DCDCAA;">RegisterHelloworldServiceServer</span><span style="color:#D4D4D4;">(grpcServer, svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpcServer.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">NewHelloworldHandler</span><span style="color:#D4D4D4;">(svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">AddRoute</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(handler)...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>Custom implementation of the <code>grpcx_ratelimit.KeyGetter</code> interface:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;"> grpcx_ratelimit.KeyGetter = (*RateLimitKeyGetter)(</span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">RateLimitKeyGetter</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (r *RateLimitKeyGetter) </span><span style="color:#DCDCAA;">GetKey</span><span style="color:#D4D4D4;">(ctx context.Context, _ </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">peerAddr</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := grpc_ctxtags.</span><span style="color:#DCDCAA;">Extract</span><span style="color:#D4D4D4;">(ctx).</span><span style="color:#DCDCAA;">Values</span><span style="color:#D4D4D4;">()[</span><span style="color:#CE9178;">&quot;peer.address&quot;</span><span style="color:#D4D4D4;">]; ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">peerAddr</span><span style="color:#D4D4D4;"> = value.(</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> stringutils.</span><span style="color:#DCDCAA;">IsEmpty</span><span style="color:#D4D4D4;">(peerAddr) {</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">ok</span><span style="color:#D4D4D4;"> := peer.</span><span style="color:#DCDCAA;">FromContext</span><span style="color:#D4D4D4;">(ctx); ok {</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#9CDCFE;">peerAddr</span><span style="color:#D4D4D4;"> = value.Addr.</span><span style="color:#DCDCAA;">String</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> peerAddr[:strings.</span><span style="color:#DCDCAA;">LastIndex</span><span style="color:#D4D4D4;">(peerAddr, </span><span style="color:#CE9178;">&quot;:&quot;</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="redis-rate-limiter-example" tabindex="-1"><a class="header-anchor" href="#redis-rate-limiter-example" aria-hidden="true">#</a> Redis Rate Limiter Example</h3><p>Redis rate limiters can be used in scenarios where multiple instances need to rate limit a key at the same time. <strong>The key&#39;s expiration time equals the time required to generate 1 token based on the rate.</strong></p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> etcd.</span><span style="color:#DCDCAA;">CloseEtcdClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewHelloworld</span><span style="color:#D4D4D4;">(conf)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">go</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">rdb</span><span style="color:#D4D4D4;"> := redis.</span><span style="color:#DCDCAA;">NewClient</span><span style="color:#D4D4D4;">(&amp;redis.Options{</span></span>
<span class="line"><span style="color:#D4D4D4;">			Addr: </span><span style="color:#CE9178;">&quot;localhost:6379&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">		})</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;"> := redisrate.</span><span style="color:#DCDCAA;">LimitFn</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(ctx context.Context) ratelimit.Limit {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// Rate limiter creation function, which creates a rate limiter that allows processing 10 requests per second, with a peak of 30 requests.</span></span>
<span class="line"><span style="color:#D4D4D4;">			</span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> ratelimit.</span><span style="color:#DCDCAA;">PerSecondBurst</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">		})</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">rl</span><span style="color:#D4D4D4;"> := grpcx_ratelimit.</span><span style="color:#DCDCAA;">NewRateLimitInterceptor</span><span style="color:#D4D4D4;">(grpcx_ratelimit.</span><span style="color:#DCDCAA;">WithRedisStore</span><span style="color:#D4D4D4;">(rdb, fn))</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">keyGetter</span><span style="color:#D4D4D4;"> := &amp;RateLimitKeyGetter{}</span></span>
<span class="line"><span style="color:#D4D4D4;">		</span><span style="color:#9CDCFE;">grpcServer</span><span style="color:#D4D4D4;"> := grpcx.</span><span style="color:#DCDCAA;">NewGrpcServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc.</span><span style="color:#DCDCAA;">StreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// In this example, the grpc_ctxtags interceptor must be added, which automatically adds the RPC caller&#39;s &quot;peer.address&quot; information to the context.Context</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_ctxtags.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_opentracing.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_prometheus.StreamServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">				logging.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">				rl.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(keyGetter),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_recovery.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			)),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc.</span><span style="color:#DCDCAA;">UnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// In this example, the grpc_ctxtags interceptor must be added, which automatically adds the RPC caller&#39;s &quot;peer.address&quot; information to the context.Context</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_ctxtags.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_opentracing.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_prometheus.UnaryServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">				logging.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">				rl.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(keyGetter),</span></span>
<span class="line"><span style="color:#D4D4D4;">				grpc_recovery.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)</span></span>
<span class="line"><span style="color:#D4D4D4;">		pb.</span><span style="color:#DCDCAA;">RegisterHelloworldServiceServer</span><span style="color:#D4D4D4;">(grpcServer, svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpcServer.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">NewHelloworldHandler</span><span style="color:#D4D4D4;">(svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">AddRoute</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(handler)...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>For a custom implementation of the <code>grpcx_ratelimit.KeyGetter</code> interface, please refer to the memory rate limiter example above.</p><h2 id="retry" tabindex="-1"><a class="header-anchor" href="#retry" aria-hidden="true">#</a> Retry</h2>`,10),w=s("To implement the retry mechanism, you need to depend on the "),R=n("code",null,"retry",-1),k=s(" module of the third-party open-source library "),I=n("code",null,"github.com/grpc-ecosystem/go-grpc-middleware",-1),q=s(". Add the retry interceptor to the "),F=n("code",null,"dialOptions",-1),N=s(" slice, and then pass "),G=n("code",null,"dialOptions",-1),L=s(" as a parameter to the load balancing client factory function to create a gRPC client connection instance. For specific usage, please refer to the comments in the source code: "),O={href:"https://github.com/grpc-ecosystem/go-grpc-middleware/blob/master/retry",target:"_blank",rel:"noopener noreferrer"},U=s("https://github.com/grpc-ecosystem/go-grpc-middleware/blob/master/retry"),T=s("."),B=a(`<div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">opts</span><span style="color:#D4D4D4;"> := []grpc_retry.CallOption{</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpc_retry.</span><span style="color:#DCDCAA;">WithBackoff</span><span style="color:#D4D4D4;">(grpc_retry.</span><span style="color:#DCDCAA;">BackoffLinear</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;"> * time.Millisecond)),</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpc_retry.</span><span style="color:#DCDCAA;">WithCodes</span><span style="color:#D4D4D4;">(codes.NotFound, codes.Aborted),</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">dialOptions</span><span style="color:#D4D4D4;"> := []grpc.DialOption{</span></span>
<span class="line"><span style="color:#D4D4D4;">	tlsOption,</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpc.</span><span style="color:#DCDCAA;">WithStreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc_retry.</span><span style="color:#DCDCAA;">StreamClientInterceptor</span><span style="color:#D4D4D4;">(opts...),</span></span>
<span class="line"><span style="color:#D4D4D4;">	)),</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpc.</span><span style="color:#DCDCAA;">WithUnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc_retry.</span><span style="color:#DCDCAA;">UnaryClientInterceptor</span><span style="color:#D4D4D4;">(opts...),</span></span>
<span class="line"><span style="color:#D4D4D4;">	)),</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := nacos.</span><span style="color:#DCDCAA;">NewWRRGrpcClientConn</span><span style="color:#D4D4D4;">(nacos.NacosConfig{</span></span>
<span class="line"><span style="color:#D4D4D4;">	ServiceName: </span><span style="color:#CE9178;">&quot;grpcdemo-server_grpc&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">}, dialOptions...)</span></span>
<span class="line"><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="logging" tabindex="-1"><a class="header-anchor" href="#logging" aria-hidden="true">#</a> Logging</h2><h3 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h3><p><code>go-doudou</code> has a global <code>zerolog.Logger</code> built into the <code>github.com/unionj-cloud/go-doudou/v2/toolkit/zlogger</code> package. If the <code>GDD_ENV</code> environment variable is not equal to an empty string and <code>dev</code>, it will include some metadata about the service itself.</p><p>You can also call the <code>InitEntry</code> function to customize the <code>zerolog.Logger</code> instance.</p><p>You can also set the log level by configuring the <code>GDD_LOG_LEVEL</code> environment variable, and set whether the log format is <code>json</code> or <code>text</code> by configuring the <code>GDD_LOG_FORMAT</code> environment variable.</p><p>You can enable HTTP request and response log printing by configuring <code>GDD_LOG_REQ_ENABLE=true</code>. The default is <code>false</code>, which means no printing.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// You can use the lumberjack library to add log rotation functionality to your service</span></span>
<span class="line"><span style="color:#D4D4D4;">zlogger.</span><span style="color:#DCDCAA;">SetOutput</span><span style="color:#D4D4D4;">(io.</span><span style="color:#DCDCAA;">MultiWriter</span><span style="color:#D4D4D4;">(os.Stdout, &amp;lumberjack.Logger{</span></span>
<span class="line"><span style="color:#D4D4D4;">			Filename:   filepath.</span><span style="color:#DCDCAA;">Join</span><span style="color:#D4D4D4;">(os.</span><span style="color:#DCDCAA;">Getenv</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;LOG_PATH&quot;</span><span style="color:#D4D4D4;">), fmt.</span><span style="color:#DCDCAA;">Sprintf</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;</span><span style="color:#9CDCFE;">%s</span><span style="color:#CE9178;">.log&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;usersvc&quot;</span><span style="color:#D4D4D4;">)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		  MaxSize:    </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,  </span><span style="color:#6A9955;">// Single log file maximum size is 5M, exceeding this will create a new log file</span></span>
<span class="line"><span style="color:#D4D4D4;">      MaxBackups: </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Keep a maximum of 10 log files</span></span>
<span class="line"><span style="color:#D4D4D4;">      MaxAge:     </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">,  </span><span style="color:#6A9955;">// Log files are kept for a maximum of 7 days</span></span>
<span class="line"><span style="color:#D4D4D4;">      Compress:   </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Whether to enable log compression</span></span>
<span class="line"><span style="color:#D4D4D4;">}))</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="elk-stack" tabindex="-1"><a class="header-anchor" href="#elk-stack" aria-hidden="true">#</a> ELK Stack</h3><p>The <code>logger</code> package supports integration with the ELK stack.</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><div class="language-yaml ext-yml line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">version</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;3.9&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">services</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">elasticsearch</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">container_name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">elasticsearch</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">image</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;docker.elastic.co/elasticsearch/elasticsearch:7.2.0&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">environment</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     - </span><span style="color:#CE9178;">&quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">     - </span><span style="color:#CE9178;">&quot;discovery.type=single-node&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">ports</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     - </span><span style="color:#CE9178;">&quot;9200:9200&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">volumes</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     - </span><span style="color:#CE9178;">./esdata:/usr/share/elasticsearch/data</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">networks</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     </span><span style="color:#569CD6;">testing_net</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#569CD6;">ipv4_address</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">172.28.1.9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">kibana</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">container_name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">kibana</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">image</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;docker.elastic.co/kibana/kibana:7.2.0&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">ports</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     - </span><span style="color:#CE9178;">&quot;5601:5601&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">networks</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     </span><span style="color:#569CD6;">testing_net</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#569CD6;">ipv4_address</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">172.28.1.10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">filebeat</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">container_name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">filebeat</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">image</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;docker.elastic.co/beats/filebeat:7.2.0&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">volumes</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     - </span><span style="color:#CE9178;">./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro</span></span>
<span class="line"><span style="color:#D4D4D4;">     - </span><span style="color:#CE9178;">./log:/var/log</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#569CD6;">networks</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">     </span><span style="color:#569CD6;">testing_net</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#569CD6;">ipv4_address</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">172.28.1.11</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">networks</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">testing_net</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">ipam</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">driver</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">default</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">config</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        - </span><span style="color:#569CD6;">subnet</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">172.28.0.0/16</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h4 id="screenshot" tabindex="-1"><a class="header-anchor" href="#screenshot" aria-hidden="true">#</a> Screenshot</h4><p><img src="`+c+`" alt="elk"></p><h2 id="jaeger-call-chain-monitoring" tabindex="-1"><a class="header-anchor" href="#jaeger-call-chain-monitoring" aria-hidden="true">#</a> Jaeger Call Chain Monitoring</h2><h3 id="usage-2" tabindex="-1"><a class="header-anchor" href="#usage-2" aria-hidden="true">#</a> Usage</h3><p>To integrate Jaeger call chain monitoring, follow these steps:</p><ol><li>Start Jaeger</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker run -d --name jaeger \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  -p 6831:6831/udp \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  -p 16686:16686 \\</span></span>
<span class="line"><span style="color:#D4D4D4;">  jaegertracing/all-in-one:1.29</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>Add two lines of configuration to the <code>.env</code> file</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">JAEGER_AGENT_HOST=localhost</span></span>
<span class="line"><span style="color:#D4D4D4;">JAEGER_AGENT_PORT=6831</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>Add three lines of code near the beginning of the <code>main</code> function</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">tracer</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">closer</span><span style="color:#D4D4D4;"> := tracing.</span><span style="color:#DCDCAA;">Init</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> closer.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">opentracing.</span><span style="color:#DCDCAA;">SetGlobalTracer</span><span style="color:#D4D4D4;">(tracer)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li>On the server side, when calling the <code>grpcx.NewGrpcServer</code> function to create a <code>grpcx.GrpcServer</code> instance, add the opentracing interceptor with the two lines of code <code>grpc_opentracing.StreamServerInterceptor(),</code> and <code>grpc_opentracing.UnaryServerInterceptor(),</code></li></ol><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> nacos.</span><span style="color:#DCDCAA;">CloseNamingClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">tracer</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">closer</span><span style="color:#D4D4D4;"> := tracing.</span><span style="color:#DCDCAA;">Init</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> closer.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	opentracing.</span><span style="color:#DCDCAA;">SetGlobalTracer</span><span style="color:#D4D4D4;">(tracer)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewHelloworld</span><span style="color:#D4D4D4;">(conf)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcServer</span><span style="color:#D4D4D4;"> := grpcx.</span><span style="color:#DCDCAA;">NewGrpcServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">StreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_ctxtags.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_prometheus.StreamServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">			logging.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_recovery.</span><span style="color:#DCDCAA;">StreamServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">UnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryServer</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_ctxtags.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_prometheus.UnaryServerInterceptor,</span></span>
<span class="line"><span style="color:#D4D4D4;">			logging.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(grpczerolog.</span><span style="color:#DCDCAA;">InterceptorLogger</span><span style="color:#D4D4D4;">(zlogger.Logger)),</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_recovery.</span><span style="color:#DCDCAA;">UnaryServerInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">	)</span></span>
<span class="line"><span style="color:#D4D4D4;">	pb.</span><span style="color:#DCDCAA;">RegisterHelloworldServiceServer</span><span style="color:#D4D4D4;">(grpcServer, svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	grpcServer.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ol start="5"><li>The client also needs to add the opentracing interceptor to the gRPC client connection instance, so that when the client initiates a gRPC request, the opentracing implementation (jaeger) can inject the span id into the metadata, otherwise the call chain with the server cannot be linked together.</li></ol><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> nacos.</span><span style="color:#DCDCAA;">CloseNamingClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">conf</span><span style="color:#D4D4D4;"> := config.</span><span style="color:#DCDCAA;">LoadFromEnv</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">tracer</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">closer</span><span style="color:#D4D4D4;"> := tracing.</span><span style="color:#DCDCAA;">Init</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> closer.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	opentracing.</span><span style="color:#DCDCAA;">SetGlobalTracer</span><span style="color:#D4D4D4;">(tracer)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">tlsOption</span><span style="color:#D4D4D4;"> := grpc.</span><span style="color:#DCDCAA;">WithTransportCredentials</span><span style="color:#D4D4D4;">(insecure.</span><span style="color:#DCDCAA;">NewCredentials</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">dialOptions</span><span style="color:#D4D4D4;"> := []grpc.DialOption{</span></span>
<span class="line"><span style="color:#D4D4D4;">		tlsOption,</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">WithStreamInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainStreamClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">StreamClientInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">		grpc.</span><span style="color:#DCDCAA;">WithUnaryInterceptor</span><span style="color:#D4D4D4;">(grpc_middleware.</span><span style="color:#DCDCAA;">ChainUnaryClient</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">			grpc_opentracing.</span><span style="color:#DCDCAA;">UnaryClientInterceptor</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">		)),</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">grpcConn</span><span style="color:#D4D4D4;"> := nacos.</span><span style="color:#DCDCAA;">NewWRRGrpcClientConn</span><span style="color:#D4D4D4;">(nacos.NacosConfig{</span></span>
<span class="line"><span style="color:#D4D4D4;">		ServiceName: </span><span style="color:#CE9178;">&quot;grpcdemo-server_grpc&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">	}, dialOptions...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#C586C0;">defer</span><span style="color:#D4D4D4;"> grpcConn.</span><span style="color:#DCDCAA;">Close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">restProvider</span><span style="color:#D4D4D4;"> := nacos.</span><span style="color:#DCDCAA;">NewWRRServiceProvider</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;grpcdemo-server_rest&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">svc</span><span style="color:#D4D4D4;"> := service.</span><span style="color:#DCDCAA;">NewEnumDemo</span><span style="color:#D4D4D4;">(conf, pb.</span><span style="color:#DCDCAA;">NewHelloworldServiceClient</span><span style="color:#D4D4D4;">(grpcConn),</span></span>
<span class="line"><span style="color:#D4D4D4;">		client.</span><span style="color:#DCDCAA;">NewHelloworldClient</span><span style="color:#D4D4D4;">(ddclient.</span><span style="color:#DCDCAA;">WithClient</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">newClient</span><span style="color:#D4D4D4;">()), ddclient.</span><span style="color:#DCDCAA;">WithProvider</span><span style="color:#D4D4D4;">(restProvider)))</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;"> := httpsrv.</span><span style="color:#DCDCAA;">NewEnumDemoHandler</span><span style="color:#D4D4D4;">(svc)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">srv</span><span style="color:#D4D4D4;"> := rest.</span><span style="color:#DCDCAA;">NewRestServer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">AddRoute</span><span style="color:#D4D4D4;">(httpsrv.</span><span style="color:#DCDCAA;">Routes</span><span style="color:#D4D4D4;">(handler)...)</span></span>
<span class="line"><span style="color:#D4D4D4;">	srv.</span><span style="color:#DCDCAA;">Run</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="screenshots" tabindex="-1"><a class="header-anchor" href="#screenshots" aria-hidden="true">#</a> Screenshots</h3><p><img src="`+D+'" alt="jaeger3"><img src="'+i+'" alt="jaeger4"></p>',30);function z(P,W){const e=p("ExternalLinkIcon");return o(),r(t,null,[u,n("p",null,[C,d,n("a",m,[g,l(e)]),A]),h,n("p",null,[v,E,n("a",f,[_,l(e)]),S]),x,n("p",null,[w,R,k,I,q,F,N,G,L,n("a",O,[U,l(e)]),T]),B],64)}var K=y(b,[["render",z]]);export{K as default};
