import{r as l,o as p,a as r,b as s,e as o,F as c,g as a,f as e}from"./app.2025f35b.js";import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";const i={},d=a(`<h1 id="cli-commands" tabindex="-1"><a class="header-anchor" href="#cli-commands" aria-hidden="true">#</a> CLI Commands</h1><p><code>go-doudou</code> comes with a built-in command-line code generator. <code>go-doudou</code> is the root command with two parameters:</p><ul><li><code>-v</code> Prints the version of the currently installed go-doudou command-line tool</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">\u279C  go-doudou.github.io git:(dev) \u2717 go-doudou -v     </span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou version v2.5.8</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>-h</code> Prints the help information. All the subcommands introduced below have this parameter, so we won&#39;t mention it again.</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">\u279C  go-doudou.github.io git:(dev) \u2717 go-doudou -h</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou works like a scaffolding tool but more than that. </span></span>
<span class="line"><span style="color:#D4D4D4;">it lets api providers design their apis and </span><span style="color:#DCDCAA;">help</span><span style="color:#D4D4D4;"> them code less. </span></span>
<span class="line"><span style="color:#D4D4D4;">it generates openapi 3.0 spec json document </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> frontend developers or other api consumers to understand what apis there, </span></span>
<span class="line"><span style="color:#D4D4D4;">consumers can import it into postman to debug and test, or upload it into some code generators to download client sdk.</span></span>
<span class="line"><span style="color:#D4D4D4;">it provides some useful components and middleware </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> constructing microservice cluster like service register and discovering, </span></span>
<span class="line"><span style="color:#D4D4D4;">load balancing and so on. it just begins, more features will come out soon.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Usage:</span></span>
<span class="line"><span style="color:#D4D4D4;">  go-doudou [flags]</span></span>
<span class="line"><span style="color:#D4D4D4;">  go-doudou [command]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Available Commands:</span></span>
<span class="line"><span style="color:#D4D4D4;">  completion  Generate the autocompletion script </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> the specified shell</span></span>
<span class="line"><span style="color:#D4D4D4;">  enum        Generate functions </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> constants to implement IEnum interface</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">help</span><span style="color:#D4D4D4;">        Help about any </span><span style="color:#DCDCAA;">command</span></span>
<span class="line"><span style="color:#D4D4D4;">  name        bulk add or update json tag of struct fields</span></span>
<span class="line"><span style="color:#D4D4D4;">  svc         generate or update service</span></span>
<span class="line"><span style="color:#D4D4D4;">  version     Print the version number of go-doudou</span></span>
<span class="line"><span style="color:#D4D4D4;">  work        Build modular application</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Flags:</span></span>
<span class="line"><span style="color:#D4D4D4;">  -h, --help      </span><span style="color:#DCDCAA;">help</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> go-doudou</span></span>
<span class="line"><span style="color:#D4D4D4;">  -v, --version   version </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> go-doudou</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Use </span><span style="color:#CE9178;">&quot;go-doudou [command] --help&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> more information about a command.</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">Note</p><p>Although you may still see the <code>ddl</code> command in the help information in some versions, this command has been deprecated and is not recommended for use in new projects. Please use the <code>svc crud</code> command instead.</p></div><p><code>go-doudou</code> also provides several subcommands to accelerate the entire development process. Let&#39;s look at them one by one.</p><h2 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> version</h2><p><code>go-doudou version</code> is mainly used to upgrade the <code>go-doudou</code> command-line tool. It not only prints information about the currently installed version but also prints information about the latest released version and asks if you want to upgrade.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">\u279C  go-doudou.github.io git:(dev) \u2717 go-doudou version</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou version v2.5.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">A new version is available: v2.5.9</span></span>
<span class="line"><span style="color:#D4D4D4;">Do you want to upgrade? [Y/n]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="completion" tabindex="-1"><a class="header-anchor" href="#completion" aria-hidden="true">#</a> completion</h2><p>The <code>completion</code> command is used to generate shell autocompletion scripts for a specified shell, improving the efficiency of using the go-doudou command line.</p><h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou completion [command]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="subcommands" tabindex="-1"><a class="header-anchor" href="#subcommands" aria-hidden="true">#</a> Subcommands</h3><ul><li><code>bash</code>: Generate an autocompletion script for bash</li><li><code>fish</code>: Generate an autocompletion script for fish</li><li><code>powershell</code>: Generate an autocompletion script for powershell</li><li><code>zsh</code>: Generate an autocompletion script for zsh</li></ul><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p>Generate a bash autocompletion script:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou completion bash &gt; ~/.bash_completion</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate a zsh autocompletion script:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou completion zsh &gt; ~/.zsh_completion</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="help" tabindex="-1"><a class="header-anchor" href="#help" aria-hidden="true">#</a> help</h2><p><code>go-doudou help</code> is the same as <code>go-doudou -h</code>.</p><h2 id="svc" tabindex="-1"><a class="header-anchor" href="#svc" aria-hidden="true">#</a> svc</h2><p><code>go-doudou svc</code> is the most important and frequently used command, used to generate or update service-related code.</p><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><p><code>go-doudou svc init</code> is used to initialize a go-doudou application. You can either execute this command in an existing folder or specify the folder path to be initialized after <code>init</code>. If the folder doesn&#39;t exist, <code>go-doudou</code> will create it and generate some files to help you get started with development, and will also execute the <code>git init</code> command. If the specified folder already exists and is not empty, <code>go-doudou</code> will skip existing files and only generate non-existent files, ensuring that existing code is not overwritten.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">\u279C  go-doudou-tutorials git:(master) go-doudou svc init helloworld</span></span>
<span class="line"><span style="color:#D4D4D4;">WARN[2022-02-17 18:14:53] file .gitignore already exists               </span></span>
<span class="line"><span style="color:#D4D4D4;">WARN[2022-02-17 18:14:53] file /Users/wubin1989/workspace/cloud/go-doudou-tutorials/helloworld/go.mod already exists </span></span>
<span class="line"><span style="color:#D4D4D4;">WARN[2022-02-17 18:14:53] file /Users/wubin1989/workspace/cloud/go-doudou-tutorials/helloworld/.env already exists </span></span>
<span class="line"><span style="color:#D4D4D4;">WARN[2022-02-17 18:14:53] file /Users/wubin1989/workspace/cloud/go-doudou-tutorials/helloworld/vo/vo.go already exists </span></span>
<span class="line"><span style="color:#D4D4D4;">WARN[2022-02-17 18:14:53] file /Users/wubin1989/workspace/cloud/go-doudou-tutorials/helloworld/svc.go already exists </span></span>
<span class="line"><span style="color:#D4D4D4;">WARN[2022-02-17 18:14:53] file /Users/wubin1989/workspace/cloud/go-doudou-tutorials/helloworld/Dockerfile already exists </span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="common-parameters" tabindex="-1"><a class="header-anchor" href="#common-parameters" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-m, --mod</code>: Module name, used to specify the Go module path</li><li><code>--module</code>: Whether to initialize as a component of a modular application (boolean). When set to <code>true</code>, go-doudou will automatically call <code>go work use</code> to add the component to the workspace.</li><li><code>-f, --file</code>: OpenAPI 3.0 or Swagger 2.0 specification JSON file path or download link</li><li><code>--case</code>: Naming rules for protobuf message fields and JSON tags, supports &quot;lowerCamel&quot; and &quot;snake&quot; (default &quot;lowerCamel&quot;)</li><li><code>-t, --type</code>: Specify the project type, value can be &quot;grpc&quot; or &quot;rest&quot; (default &quot;grpc&quot;)</li><li><code>--db_driver</code>: Database driver type, options include &quot;mysql&quot;, &quot;postgres&quot;, &quot;sqlite&quot;, &quot;sqlserver&quot;, &quot;tidb&quot;</li><li><code>--db_dsn</code>: Database connection URL</li><li><code>--grpc_gen_cmd</code>: Command used to generate gRPC service and message code (default uses protoc command)</li></ul><h4 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h4><p>Basic initialization:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init helloworld -m github.com/unionj-cloud/helloworld</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Initialize with MySQL database and generate gRPC code:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init myservice --db_driver mysql --db_dsn </span><span style="color:#CE9178;">&quot;root:password@tcp(localhost:3306)/mydb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#D4D4D4;"> --db_soft deleted_at --db_grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Initialize as a component of a modular application:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init component-c -m my-workspace/component-c --module</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h3><p><code>go-doudou svc http</code> is used to generate HTTP routes and handler code for RESTful interfaces.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http -c</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-1" tabindex="-1"><a class="header-anchor" href="#common-parameters-1" aria-hidden="true">#</a> Common Parameters</h4>`,42),u=s("li",null,[s("code",null,"--handler"),e(": Whether to generate default handler implementation (boolean)")],-1),m=s("code",null,"-c, --client",-1),D=e(": "),h=s("code",null,"bool",-1),b=e(" type. Used to set whether to generate HTTP request client code that wraps "),y={href:"https://github.com/go-resty/resty",target:"_blank",rel:"noopener noreferrer"},g=e("go-resty"),v=e("."),f=a("<li><code>-e, --env</code>: <code>string</code> type. Used to set the environment variable name for the server baseUrl written into the HTTP request client code. If not specified, the capitalized service interface name in the <code>svc.go</code> file is used by default.</li><li><code>--case</code>: <code>string</code> type. In the default <code>http.Handler</code> interface implementation code generated, there are some anonymous structures as response bodies. You may need to set this parameter to specify the naming rules for field names during JSON serialization. Accepts two values: <code>lowerCamel</code> and <code>snake</code>. Default value is <code>lowerCamel</code>.</li><li><code>-o, --omitempty</code>: <code>bool</code> type. If this parameter is set, <code>,omitempty</code> will be added to the JSON tag values of anonymous structure fields in the default <code>http.Handler</code> interface implementation code.</li><li><code>-r, --routePattern</code>: <code>int</code> type. This parameter is used to set the generation rule for HTTP routes. If the value is <code>0</code>, <code>go-doudou</code> will first convert the method name of the service interface from camel case to snake case, then replace the underscore <code>_</code> with a backslash <code>/</code>, and the result is used as the API path. If the value is <code>1</code>, <code>go-doudou</code> will convert the service interface name to lowercase, convert the method name to lowercase as well, and then concatenate them with a backslash <code>/</code>. The result is used as the API path. Default value is <code>0</code>.</li><li><code>--doc</code>: Whether to generate OpenAPI 3.0 JSON documentation (boolean)</li><li><code>--allowGetWithReqBody</code>: Whether to allow GET requests with a request body (boolean)</li>",6),C=a(`<p>Using the <code>-e</code> parameter example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http -c -e godoudou_helloworld</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The generated code will use the specified environment variable:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">NewHelloworldClient</span><span style="color:#D4D4D4;">(opts ...ddhttp.DdClientOption) *HelloworldClient {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">defaultProvider</span><span style="color:#D4D4D4;"> := ddhttp.</span><span style="color:#DCDCAA;">NewServiceProvider</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;godoudou_helloworld&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#9CDCFE;">defaultClient</span><span style="color:#D4D4D4;"> := ddhttp.</span><span style="color:#DCDCAA;">NewClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">	...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> svcClient</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="svc-http-client" tabindex="-1"><a class="header-anchor" href="#svc-http-client" aria-hidden="true">#</a> svc http client</h3><p><code>svc http client</code> is used to generate Go language HTTP request client code from a JSON format <code>OpenAPI 3.0</code> API document.</p><h4 id="common-parameters-2" tabindex="-1"><a class="header-anchor" href="#common-parameters-2" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-e, --env</code>: <code>string</code> type. Used to set the environment variable name for the server baseUrl written into the HTTP request client code.</li><li><code>-f, --file</code>: <code>string</code> type. Used to set the local path or download link of the API document.</li><li><code>-o, --omit</code>: <code>bool</code> type. If this parameter is set, <code>,omitempty</code> will be added after the field name in the JSON tag.</li><li><code>-p, --pkg</code>: <code>string</code> type. Used to set the package name, default value is <code>client</code>.</li></ul><h4 id="examples-2" tabindex="-1"><a class="header-anchor" href="#examples-2" aria-hidden="true">#</a> Examples</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http client -o -e GRAPHHOPPER -f https://docs.graphhopper.com/openapi.json --pkg graphhopper</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>Each API needs to have a response body with a <code>200</code> status code, otherwise code for that API will not be generated, and an error message will be output in the command line terminal.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">\u279C  go-doudou-tutorials git:(master) \u2717 go-doudou svc http client -o -e PETSTORE -f https://petstore3.swagger.io/api/v3/openapi.json --pkg petstore</span></span>
<span class="line"><span style="color:#D4D4D4;">ERRO[2022-02-18 11:56:08] 200 response definition not found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> api Get /user/logout </span></span>
<span class="line"><span style="color:#D4D4D4;">ERRO[2022-02-18 11:56:08] 200 response definition not found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> api Put /user/{username} </span></span>
<span class="line"><span style="color:#D4D4D4;">ERRO[2022-02-18 11:56:08] 200 response definition not found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> api Delete /user/{username} </span></span>
<span class="line"><span style="color:#D4D4D4;">ERRO[2022-02-18 11:56:08] 200 response definition not found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> api Post /user </span></span>
<span class="line"><span style="color:#D4D4D4;">ERRO[2022-02-18 11:56:09] 200 response definition not found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> api Post /pet/{petId} </span></span>
<span class="line"><span style="color:#D4D4D4;">ERRO[2022-02-18 11:56:09] 200 response definition not found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> api Delete /pet/{petId} </span></span>
<span class="line"><span style="color:#D4D4D4;">ERRO[2022-02-18 11:56:09] 200 response definition not found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> api Delete /store/order/{orderId} </span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><h3 id="svc-http-test" tabindex="-1"><a class="header-anchor" href="#svc-http-test" aria-hidden="true">#</a> svc http test</h3><p><code>svc http test</code> is a subcommand of <code>svc http</code>, used to generate integration test code from Postman Collection files.</p><h4 id="basic-usage-1" tabindex="-1"><a class="header-anchor" href="#basic-usage-1" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http </span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;"> [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-3" tabindex="-1"><a class="header-anchor" href="#common-parameters-3" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>--collection</code>: Postman Collection v2.1 compatible file path</li><li><code>--dotenv</code>: dotenv format configuration file path for integration tests only</li></ul><h4 id="examples-3" tabindex="-1"><a class="header-anchor" href="#examples-3" aria-hidden="true">#</a> Examples</h4><p>Generate test code from Postman Collection:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http </span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;"> --collection ./postman_collection.json --dotenv ./.env.test</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="grpc" tabindex="-1"><a class="header-anchor" href="#grpc" aria-hidden="true">#</a> grpc</h3><p><code>go-doudou svc grpc</code> is used to generate <code>.proto</code> suffix files with <code>Protobuf v3</code> syntax, gRPC server and client stub code, etc. in the <code>transport/grpc</code> path. If the <code>svcimpl.go</code> file does not exist, it will also generate this file. If it already exists, it will incrementally update it. If there is no <code>main.go</code> file in the <code>cmd</code> path, it will generate this file. If it already exists, it will be skipped. The generated <code>main.go</code> file already has the relevant code to start the gRPC service.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">...</span></span>
<span class="line"><span style="color:#D4D4D4;">\u251C\u2500\u2500 svc.go</span></span>
<span class="line"><span style="color:#D4D4D4;">\u251C\u2500\u2500 svcimpl.go</span></span>
<span class="line"><span style="color:#D4D4D4;">\u251C\u2500\u2500 transport</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502   \u251C\u2500\u2500 grpc</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502   \u2502   \u251C\u2500\u2500 helloworld.pb.go</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502   \u2502   \u251C\u2500\u2500 helloworld.proto</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502   \u2502   \u2514\u2500\u2500 helloworld_grpc.pb.go</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502   \u2514\u2500\u2500 httpsrv</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502       \u251C\u2500\u2500 handler.go</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502       \u251C\u2500\u2500 handlerimpl.go</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2502       \u2514\u2500\u2500 middleware.go</span></span>
<span class="line"><span style="color:#D4D4D4;">\u2514\u2500\u2500 vo</span></span>
<span class="line"><span style="color:#D4D4D4;">    \u2514\u2500\u2500 vo.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="common-parameters-4" tabindex="-1"><a class="header-anchor" href="#common-parameters-4" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-o, --omitempty</code>: Whether to add <code>omitempty</code> to JSON tags in generated anonymous structures (boolean)</li><li><code>--case</code>: Protobuf message field naming strategy, supports &quot;lowerCamel&quot; and &quot;snake&quot; (default &quot;lowerCamel&quot;)</li><li><code>--grpc_gen_cmd</code>: Command used to generate gRPC service and message code (default uses protoc command)</li><li><code>--http2grpc</code>: Whether to generate RESTful API for gRPC service (boolean)</li><li><code>--allow_get_body</code>: Whether to allow GET requests with a request body (boolean)</li><li><code>--annotated_only</code>: Whether to only generate gRPC API for methods with @grpc annotation (boolean)</li></ul><h4 id="examples-4" tabindex="-1"><a class="header-anchor" href="#examples-4" aria-hidden="true">#</a> Examples</h4><p>Generate basic gRPC service code:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate gRPC service code and provide RESTful API proxy:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc --http2grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="crud" tabindex="-1"><a class="header-anchor" href="#crud" aria-hidden="true">#</a> crud</h3><p>The <code>svc crud</code> command is used to generate generic CRUD code from a database. This command is the recommended replacement for the deprecated <code>ddl</code> command.</p><h4 id="basic-usage-2" tabindex="-1"><a class="header-anchor" href="#basic-usage-2" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc crud [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-5" tabindex="-1"><a class="header-anchor" href="#common-parameters-5" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>--db_orm</code>: Specify ORM, currently only supports gorm (default &quot;gorm&quot;)</li><li><code>--db_driver</code>: Database driver type, options include &quot;mysql&quot;, &quot;postgres&quot;, &quot;sqlite&quot;, &quot;sqlserver&quot;, &quot;tidb&quot;</li><li><code>--db_dsn</code>: Database connection URL</li><li><code>--db_soft</code>: Database soft delete column name (default &quot;deleted_at&quot;)</li><li><code>--db_service</code>: Generate gRPC or REST service, accepts values: grpc or rest</li><li><code>--db_gen_gen</code>: Whether to generate gen.go file (boolean)</li><li><code>--db_table_prefix</code>: Table prefix or PostgreSQL schema name</li><li><code>--db_table_glob</code>: Used to filter glob-matched tables</li><li><code>--db_table_exclude_glob</code>: Used to exclude glob-matched tables</li><li><code>--case</code>: Naming rules for protobuf message fields and JSON tags, supports &quot;lowerCamel&quot; and &quot;snake&quot; (default &quot;lowerCamel&quot;)</li><li><code>--db_type_mapping</code>: Specify custom column type to Go type mappings</li><li><code>--db_omitempty</code>: Whether to add <code>omitempty</code> to JSON tags in generated model fields (boolean)</li><li><code>--grpc_gen_cmd</code>: Command used to generate gRPC service and message code (default uses protoc command)</li></ul><h4 id="examples-5" tabindex="-1"><a class="header-anchor" href="#examples-5" aria-hidden="true">#</a> Examples</h4><p>Generate CRUD code from MySQL database:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc crud --db_driver mysql --db_dsn </span><span style="color:#CE9178;">&quot;root:password@tcp(localhost:3306)/mydb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#D4D4D4;"> --db_soft deleted_at --db_service rest</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate CRUD code from PostgreSQL database, and specify schema:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc crud --db_driver postgres --db_dsn </span><span style="color:#CE9178;">&quot;host=localhost user=postgres password=postgres dbname=mydb port=5432 sslmode=disable&quot;</span><span style="color:#D4D4D4;"> --db_table_prefix public --db_service grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h3><p><code>go-doudou svc run</code> is used to start the service.</p><h4 id="common-parameters-6" tabindex="-1"><a class="header-anchor" href="#common-parameters-6" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-w, --watch</code>: <code>bool</code> type. Used to enable <code>watch</code> mode, i.e., hot reload. Not supported on the Windows platform. Although this feature has been implemented, it is not recommended for use.</li></ul><h4 id="examples-6" tabindex="-1"><a class="header-anchor" href="#examples-6" aria-hidden="true">#</a> Examples</h4><p>Start the service:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc run</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Start the service with watch mode enabled:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc run -w</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> push</h3><p><code>go-doudou svc push</code> is used to generate a docker image, push it to a remote image repository, and generate k8s deployment files. It actually executes the commands <code>go mod vendor</code>, <code>docker build</code>, <code>docker tag</code>, <code>docker push</code> in sequence.</p><h4 id="common-parameters-7" tabindex="-1"><a class="header-anchor" href="#common-parameters-7" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>--pre</code>: <code>string</code> type. Used to set the image file name prefix.</li><li><code>-r, --repo</code>: <code>string</code> type. Used to set the remote image repository address.</li><li><code>--ver</code>: Docker image version</li></ul><h4 id="examples-7" tabindex="-1"><a class="header-anchor" href="#examples-7" aria-hidden="true">#</a> Examples</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc push --pre godoudou_ -r wubin1989</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>After the command is executed, you will get two files:</p><ul><li><code>\${service}_deployment.yaml</code>: Stateless k8s application deployment file, recommended for monolithic application architecture.</li><li><code>\${service}_statefulset.yaml</code>: Stateful k8s application deployment file, recommended for microservice architecture.</li></ul><h3 id="deploy" tabindex="-1"><a class="header-anchor" href="#deploy" aria-hidden="true">#</a> deploy</h3><p><code>go-doudou svc deploy</code> is used to deploy the service to k8s. It actually executes the <code>kubectl apply -f</code> command.</p><h4 id="common-parameters-8" tabindex="-1"><a class="header-anchor" href="#common-parameters-8" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-k, --k8sfile</code>: <code>string</code> type. Used to set the local path of the k8s deployment file. Default value is <code>\${service}_statefulset.yaml</code>.</li></ul><h4 id="examples-8" tabindex="-1"><a class="header-anchor" href="#examples-8" aria-hidden="true">#</a> Examples</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc deploy -k helloworld_deployment.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="shutdown" tabindex="-1"><a class="header-anchor" href="#shutdown" aria-hidden="true">#</a> shutdown</h3><p><code>go-doudou svc shutdown</code> is used to take the service offline from k8s, executing the <code>kubectl delete -f</code> command.</p><h4 id="common-parameters-9" tabindex="-1"><a class="header-anchor" href="#common-parameters-9" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-k, --k8sfile</code>: <code>string</code> type. Used to set the local path of the k8s deployment file. Default value is <code>\${service}_statefulset.yaml</code>.</li></ul><h4 id="examples-9" tabindex="-1"><a class="header-anchor" href="#examples-9" aria-hidden="true">#</a> Examples</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc shutdown -k helloworld_deployment.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h2><p>The <code>name</code> command is used to batch add or update JSON tags for structure fields. It generates <code>json</code> tags for structure fields according to the specified naming rule. The default generation strategy is <strong>lowercase camel case naming strategy</strong>, and it also supports snake case naming. Unexported fields are skipped, and only JSON tags of exported fields are modified. It supports <code>omitempty</code>.</p><h3 id="common-parameters-10" tabindex="-1"><a class="header-anchor" href="#common-parameters-10" aria-hidden="true">#</a> Common Parameters</h3>`,73),E=s("li",null,[s("code",null,"-f, --file"),e(": Go source file path")],-1),k=s("li",null,[s("code",null,"-c, --case"),e(': JSON tag naming rule, supports "lowerCamel", "snake", etc. (default "lowerCamel")')],-1),x=s("li",null,[s("code",null,"-s, --strategy"),e(': Name of strategy, currently only supports "lowerCamel" and "snake" (default "lowerCamel")')],-1),w=s("li",null,[s("code",null,"-o, --omitempty"),e(": Whether to add "),s("code",null,"omitempty"),e(" mark (boolean)")],-1),_=s("code",null,"--form",-1),q=e(": Whether to add form tags for "),P={href:"https://github.com/go-playground/form",target:"_blank",rel:"noopener noreferrer"},S=e("github.com/go-playground/form"),A=a(`<h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><ul><li>Write <code>//go:generate go-doudou name --file $GOFILE</code> in the go file, no position restriction, but it&#39;s best to write it at the top. The current implementation affects all structs in the entire file.</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">//go:generate go-doudou name --file $GOFILE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Event</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	Name      </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">	EventType </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TestName</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	Age    age</span></span>
<span class="line"><span style="color:#D4D4D4;">	School []</span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		Name </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">		Addr </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			Zip   </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">			Block </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">			Full  </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">		}</span></span>
<span class="line"><span style="color:#D4D4D4;">	}</span></span>
<span class="line"><span style="color:#D4D4D4;">	EventChan </span><span style="color:#569CD6;">chan</span><span style="color:#D4D4D4;"> Event</span></span>
<span class="line"><span style="color:#D4D4D4;">	SigChan   </span><span style="color:#569CD6;">chan</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">	Callback  </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">bool</span></span>
<span class="line"><span style="color:#D4D4D4;">	CallbackN </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(param </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">bool</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>Execute the command <code>go generate ./...</code> in the project root path</li></ul><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Event</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	Name      </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">	EventType </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">\`json:&quot;eventType&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TestName</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	Age    age </span><span style="color:#CE9178;">\`json:&quot;age&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">	School []</span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">		Name </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">		Addr </span><span style="color:#569CD6;">struct</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">			Zip   </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;zip&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">			Block </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;block&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">			Full  </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;full&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">		} </span><span style="color:#CE9178;">\`json:&quot;addr&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">	} </span><span style="color:#CE9178;">\`json:&quot;school&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">	EventChan </span><span style="color:#569CD6;">chan</span><span style="color:#D4D4D4;"> Event              </span><span style="color:#CE9178;">\`json:&quot;eventChan&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">	SigChan   </span><span style="color:#569CD6;">chan</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">                </span><span style="color:#CE9178;">\`json:&quot;sigChan&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">	Callback  </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;">       </span><span style="color:#CE9178;">\`json:&quot;callback&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">	CallbackN </span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(param </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">\`json:&quot;callbackN&quot;\`</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="examples-10" tabindex="-1"><a class="header-anchor" href="#examples-10" aria-hidden="true">#</a> Examples</h3><p>Add snake_case JSON tags to User structure fields:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou name -f ./model/user.go -c snake -o</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate both JSON and form tags:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou name -f ./model/user.go -c lowerCamel -o --form</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> enum</h2><p>The <code>enum</code> command is used to generate functions that implement the <code>IEnum</code> interface for constants. This is very useful for using enum types in Go.</p><h3 id="basic-usage-3" tabindex="-1"><a class="header-anchor" href="#basic-usage-3" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou enum [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="common-parameters-11" tabindex="-1"><a class="header-anchor" href="#common-parameters-11" aria-hidden="true">#</a> Common Parameters</h3><ul><li><code>-f, --file</code>: Absolute path of the Go source file</li></ul><h3 id="examples-11" tabindex="-1"><a class="header-anchor" href="#examples-11" aria-hidden="true">#</a> Examples</h3><p>Generate enum interface implementation for a file containing constant definitions:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou enum -f ./enum/status.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generated code example (assuming status.go defines constants of type Status):</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Original file</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Status</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusPending </span><span style="color:#9CDCFE;">Status</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">iota</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusActive</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusInactive</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Generated functions</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (s *Status) </span><span style="color:#DCDCAA;">StringSetter</span><span style="color:#D4D4D4;">(value </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> value {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusPending&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusPending</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusActive&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusActive</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusInactive&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusInactive</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusPending</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (s *Status) </span><span style="color:#DCDCAA;">StringGetter</span><span style="color:#D4D4D4;">() </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> *s {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> StatusPending:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusPending&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> StatusActive:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusActive&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> StatusInactive:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusInactive&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusPending&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="work" tabindex="-1"><a class="header-anchor" href="#work" aria-hidden="true">#</a> work</h2><p>The <code>work</code> command is used to build modular applications. It creates a project structure with a workspace and a main entry module.</p><h3 id="basic-usage-4" tabindex="-1"><a class="header-anchor" href="#basic-usage-4" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work [flags]</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou work [command]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="subcommands-1" tabindex="-1"><a class="header-anchor" href="#subcommands-1" aria-hidden="true">#</a> Subcommands</h3><ul><li><code>init</code>: Initialize workspace folder</li></ul><h3 id="work-init" tabindex="-1"><a class="header-anchor" href="#work-init" aria-hidden="true">#</a> work init</h3><p>The <code>work init</code> command is used to initialize a workspace folder for developing modular applications.</p><h4 id="basic-usage-5" tabindex="-1"><a class="header-anchor" href="#basic-usage-5" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work init [dir]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Where <code>[dir]</code> is the workspace directory path to be initialized. If not specified, the current directory is used.</p><h4 id="workspace-structure" tabindex="-1"><a class="header-anchor" href="#workspace-structure" aria-hidden="true">#</a> Workspace Structure</h4><p>After executing the <code>work init</code> command, go-doudou will create the following workspace structure:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">workspace/              # Workspace root directory
\u251C\u2500\u2500 go.work             # Go workspace file, automatically includes the main module and other components
\u2514\u2500\u2500 main/               # Main entry module directory
    \u251C\u2500\u2500 go.mod          # go.mod file for the main module
    \u251C\u2500\u2500 .env            # Environment variables configuration file
    \u2514\u2500\u2500 cmd/            # Command directory
        \u2514\u2500\u2500 main.go     # Main entry file, responsible for loading and running all components
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>When using <code>svc init --module</code> to add components, go-doudou will automatically call the <code>go work use</code> command to add the new component to the workspace, and automatically update the <code>main/cmd/main.go</code> file to import the new component&#39;s plugin.</p><h4 id="examples-12" tabindex="-1"><a class="header-anchor" href="#examples-12" aria-hidden="true">#</a> Examples</h4><p>Initialize the current directory as a workspace:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work init</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Initialize a specified directory as a workspace:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work init ./my-workspace</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="advanced-usage-and-tips" tabindex="-1"><a class="header-anchor" href="#advanced-usage-and-tips" aria-hidden="true">#</a> Advanced Usage and Tips</h2><h3 id="_1-control-interface-permissions-with-annotations" tabindex="-1"><a class="header-anchor" href="#_1-control-interface-permissions-with-annotations" aria-hidden="true">#</a> 1. Control Interface Permissions with Annotations</h3><p>In the service interface, you can use special comments to add annotations, such as:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// @role(ADMIN)</span></span>
<span class="line"><span style="color:#DCDCAA;">GetAdminData</span><span style="color:#D4D4D4;">(ctx context.Context) (data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then check these annotations in middleware:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">annotations</span><span style="color:#D4D4D4;"> := httpsrv.RouteAnnotationStore.</span><span style="color:#DCDCAA;">GetParams</span><span style="color:#D4D4D4;">(routeName, </span><span style="color:#CE9178;">&quot;@role&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> !sliceutils.</span><span style="color:#DCDCAA;">StringContains</span><span style="color:#D4D4D4;">(annotations, userRole) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Reject access</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-customize-protoc-command" tabindex="-1"><a class="header-anchor" href="#_2-customize-protoc-command" aria-hidden="true">#</a> 2. Customize protoc Command</h3><p>For complex gRPC services, you can customize the protoc command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc --grpc_gen_cmd </span><span style="color:#CE9178;">&quot;protoc --proto_path=. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative --validate_out=lang=go,paths=source_relative:. transport/grpc/myservice.proto&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_3-configure-environment-variables-to-affect-service-behavior" tabindex="-1"><a class="header-anchor" href="#_3-configure-environment-variables-to-affect-service-behavior" aria-hidden="true">#</a> 3. Configure Environment Variables to Affect Service Behavior</h3><p>go-doudou supports various environment variables to configure service behavior:</p><ul><li><code>GDD_SERVICE_NAME</code>: Service name</li><li><code>GDD_SERVICE_GROUP</code>: Service group name</li><li><code>GDD_SERVICE_VERSION</code>: Service version</li><li><code>GDD_WEIGHT</code>: Service instance weight</li><li><code>GDD_REGISTER_HOST</code>: Service registration host</li><li><code>GDD_HTTP_PORT</code>: HTTP service port</li><li><code>GDD_GRPC_PORT</code>: gRPC service port</li><li><code>GDD_LOG_LEVEL</code>: Log level, optional values: &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;</li><li><code>GDD_PROMETHEUS</code>: Whether to enable Prometheus metrics collection</li></ul><p>Example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GDD_SERVICE_NAME=myservice</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GDD_HTTP_PORT=8080</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GDD_LOG_LEVEL=debug</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc run</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,55);function R(I,T){const n=l("ExternalLinkIcon");return p(),r(c,null,[d,s("ul",null,[u,s("li",null,[m,D,h,b,s("a",y,[g,o(n)]),v]),f]),C,s("ul",null,[E,k,x,w,s("li",null,[_,q,s("a",P,[S,o(n)])])]),A],64)}var N=t(i,[["render",R]]);export{N as default};
