import{r as i,o as t,a as r,b as e,e as a,w as o,F as p,f as s,g as c}from"./app.2025f35b.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const u={},m=e("h1",{id:"detailed-guide-to-go-doudou-cli-commands",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#detailed-guide-to-go-doudou-cli-commands","aria-hidden":"true"},"#"),s(" Detailed Guide to go-doudou CLI Commands")],-1),h={class:"table-of-contents"},b=s("Installation and Upgrade"),g=s("Installing go-doudou"),v=s("Upgrading go-doudou"),D=s("Command Overview"),y=s("Detailed Explanation of the completion Command"),f=s("Basic Usage"),_=s("Subcommands"),E=s("Examples"),x=s("Detailed Explanation of the svc Command"),k=s("svc init"),C=s("svc http"),w=s("svc http client"),A=s("svc http test"),S=s("svc grpc"),q=s("svc crud"),P=s("svc run"),T=s("svc push"),G=s("svc deploy"),I=s("svc shutdown"),R=s("Detailed Explanation of the name Command"),U=s("Basic Usage"),B=s("Common Parameters"),z=s("Examples"),O=s("Detailed Explanation of the enum Command"),j=s("Basic Usage"),L=s("Common Parameters"),N=s("Examples"),W=s("Detailed Explanation of the version Command"),M=s("Basic Usage"),H=s("Examples"),F=s("Detailed Explanation of the work Command"),J=s("Basic Usage"),V=s("Subcommands"),K=s("work init"),Y=s("Practical Application Examples"),Q=s("1. Microservice Initialization and Development Process"),X=s("2. Database Table-Based Microservice Generation"),Z=s("3. Using the crud Command to Generate a CRUD Service from an Existing Database"),$=s("4. Modular Application Development in a Workspace"),ee=s("5. Implementing Enum Types"),se=s("6. Generate Autocompletion Scripts"),ae=s("Advanced Usage and Tips"),ne=s("1. Using Annotations to Control Interface Permissions"),oe=s("2. Custom protoc Command"),le=s("3. Environment Variables Affecting Service Behavior"),ie=s("4. Integration Testing Tips"),ce=s("5. Modular Application Development Tips"),te=s("Summary"),re=e("img",{src:"https://images.unsplash.com/photo-1555066931-4365d14bab8c?q=80&w=1740&fm=jpg&fit=crop",alt:"programming.jpg"},null,-1),pe=s(" Photo by "),de={href:"https://unsplash.com/@cgower?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText",target:"_blank",rel:"noopener noreferrer"},ue=s("Christopher Gower"),me=s(" on "),he={href:"https://unsplash.com/photos/m_HRfLhgABo?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText",target:"_blank",rel:"noopener noreferrer"},be=s("Unsplash"),ge=c(`<p>go-doudou is a powerful Go language microservice development framework that provides rich command-line tools to help developers quickly build, deploy, and manage microservices. This article will detail the usage of various commands and subcommands of the go-doudou CLI tool, and explain them in conjunction with actual examples.</p><h2 id="installation-and-upgrade" tabindex="-1"><a class="header-anchor" href="#installation-and-upgrade" aria-hidden="true">#</a> Installation and Upgrade</h2><h3 id="installing-go-doudou" tabindex="-1"><a class="header-anchor" href="#installing-go-doudou" aria-hidden="true">#</a> Installing go-doudou</h3><p>For Go versions below 1.17:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go get -v github.com/unionj-cloud/go-doudou/v2@v2.5.8</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>For Go versions &gt;= 1.17, it&#39;s recommended to use the following command to install the <code>go-doudou</code> command-line tool globally:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go install -v github.com/unionj-cloud/go-doudou/v2@v2.5.8</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>It&#39;s recommended to use the following command to download go-doudou as a project dependency:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go get -v -d github.com/unionj-cloud/go-doudou/v2@v2.5.8</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>If you encounter a <code>410 Gone error</code>, please execute the following command first, and then execute the above installation command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GOSUMDB=off</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><h3 id="upgrading-go-doudou" tabindex="-1"><a class="header-anchor" href="#upgrading-go-doudou" aria-hidden="true">#</a> Upgrading go-doudou</h3><p>Execute the <code>go-doudou version</code> command to upgrade the globally installed go-doudou command-line tool:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou version</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>If a new version is detected, you will be prompted whether to upgrade. After selecting &quot;Yes&quot;, the latest version will be automatically installed.</p><h2 id="command-overview" tabindex="-1"><a class="header-anchor" href="#command-overview" aria-hidden="true">#</a> Command Overview</h2><p>The basic usage of the go-doudou command-line tool is as follows:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou [flags]</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou [command]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Main commands include:</p><ul><li><code>svc</code>: Generate or update services <ul><li><code>init</code>: Initialize new project</li><li><code>http</code>: Generate HTTP routes and handlers <ul><li><code>client</code>: Generate HTTP client code</li><li><code>test</code>: Generate integration test code</li></ul></li><li><code>grpc</code>: Generate gRPC service code</li><li><code>crud</code>: Generate generic CRUD code from database</li><li><code>run</code>: Run the service</li><li><code>push</code>: Build Docker image and push</li><li><code>deploy</code>: Deploy the service to Kubernetes</li><li><code>shutdown</code>: Shut down the deployed service</li></ul></li><li><code>completion</code>: Generate autocompletion script for specified shell</li><li><code>enum</code>: Generate functions for constants to implement IEnum interface</li><li><code>name</code>: Bulk add or update JSON tags of struct fields</li><li><code>version</code>: Show the version number of go-doudou</li><li><code>work</code>: Build modular application</li></ul><div class="custom-container warning"><p class="custom-container-title">Note</p><p>Although the <code>ddl</code> command may still be visible in the help information, this command has been deprecated and is not recommended for use in new projects. Please use the <code>svc crud</code> command instead.</p></div><p>You can view the help information by running <code>go-doudou -h</code>:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou -h</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Example output:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou works like a scaffolding tool but more than that. 
it lets api providers design their apis and help them code less. 
it generates openapi 3.0 spec json document for frontend developers or other api consumers to understand what apis there, 
consumers can import it into postman to debug and test, or upload it into some code generators to download client sdk.
it provides some useful components and middleware for constructing microservice cluster like service register and discovering, 
load balancing and so on. it just begins, more features will come out soon.

Usage:
  go-doudou [flags]
  go-doudou [command]

Available Commands:
  completion  Generate the autocompletion script for the specified shell
  enum        Generate functions for constants to implement IEnum interface
  help        Help about any command
  name        bulk add or update json tag of struct fields
  svc         generate or update service
  version     Print the version number of go-doudou
  work        Build modular application

Flags:
  -h, --help      help for go-doudou
  -v, --version   version for go-doudou
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="detailed-explanation-of-the-completion-command" tabindex="-1"><a class="header-anchor" href="#detailed-explanation-of-the-completion-command" aria-hidden="true">#</a> Detailed Explanation of the completion Command</h2><p>The <code>completion</code> command is used to generate an autocompletion script for the specified shell to improve the efficiency of using the go-doudou command line.</p><h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou completion [command]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="subcommands" tabindex="-1"><a class="header-anchor" href="#subcommands" aria-hidden="true">#</a> Subcommands</h3><ul><li><code>bash</code>: Generate an autocompletion script for bash</li><li><code>fish</code>: Generate an autocompletion script for fish</li><li><code>powershell</code>: Generate an autocompletion script for powershell</li><li><code>zsh</code>: Generate an autocompletion script for zsh</li></ul><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p>Generate bash autocompletion script:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou completion bash &gt; ~/.bash_completion</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate zsh autocompletion script:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou completion zsh &gt; ~/.zsh_completion</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="detailed-explanation-of-the-svc-command" tabindex="-1"><a class="header-anchor" href="#detailed-explanation-of-the-svc-command" aria-hidden="true">#</a> Detailed Explanation of the svc Command</h2><p>The <code>svc</code> command is the most commonly used command in the go-doudou command-line tool, used to generate or update service-related code. It contains multiple subcommands:</p><h3 id="svc-init" tabindex="-1"><a class="header-anchor" href="#svc-init" aria-hidden="true">#</a> svc init</h3><p>The <code>svc init</code> command is used to initialize a new go-doudou microservice project.</p><h4 id="basic-usage-1" tabindex="-1"><a class="header-anchor" href="#basic-usage-1" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init [dir] [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where <code>[dir]</code> is the name of the project directory to initialize.</p><h4 id="common-parameters" tabindex="-1"><a class="header-anchor" href="#common-parameters" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-m, --mod</code>: Module name</li><li><code>--module</code>: Initialize as a component of a modular application (boolean value). When set to <code>true</code>, go-doudou will automatically call <code>go work use</code> to add the component to the workspace.</li><li><code>-f, --file</code>: Path or download link to an OpenAPI 3.0 or Swagger 2.0 specification JSON file</li><li><code>--case</code>: Naming convention for protobuf message fields and JSON tags, supports &quot;lowerCamel&quot; and &quot;snake&quot; (default &quot;lowerCamel&quot;)</li><li><code>-t, --type</code>: Specify project type, value can be &quot;grpc&quot; or &quot;rest&quot; (default &quot;grpc&quot;)</li><li><code>--grpc_gen_cmd</code>: Command for generating gRPC service and message code (default uses protoc command)</li></ul><h4 id="examples-1" tabindex="-1"><a class="header-anchor" href="#examples-1" aria-hidden="true">#</a> Examples</h4><p>Basic initialization:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init myservice -m github.com/myorg/myservice</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Initialize with MySQL database and generate gRPC code:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init myservice --db_driver mysql --db_dsn </span><span style="color:#CE9178;">&quot;root:password@tcp(localhost:3306)/mydb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#D4D4D4;"> --db_soft deleted_at --db_grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Initialize as a component of a modular application:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init component-c -m my-workspace/component-c --module</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>When using the <code>--module</code> flag, go-doudou will automatically perform the following operations:</p><ol><li>Create the necessary project structure</li><li>Automatically call <code>go work use</code> to add the newly created component to the workspace</li><li>Generate plugins and entry code for the modular application</li><li>Update the main application&#39;s import statements to automatically include the new component&#39;s plugins</li></ol><h3 id="svc-http" tabindex="-1"><a class="header-anchor" href="#svc-http" aria-hidden="true">#</a> svc http</h3><p>The <code>svc http</code> command is used to generate HTTP routes and handlers.</p><h4 id="basic-usage-2" tabindex="-1"><a class="header-anchor" href="#basic-usage-2" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-1" tabindex="-1"><a class="header-anchor" href="#common-parameters-1" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>--handler</code>: Whether to generate default handler implementations (boolean value)</li><li><code>-c, --client</code>: Whether to generate default Go HTTP client code (boolean value)</li><li><code>-o, --omitempty</code>: Whether to add <code>omitempty</code> to JSON tags in generated anonymous structs (boolean value)</li><li><code>--case</code>: JSON tag naming convention applied to fields in anonymous structs in generated handlers, options are &quot;lowerCamel&quot; or &quot;snake&quot; (default &quot;lowerCamel&quot;)</li><li><code>--doc</code>: Whether to generate OpenAPI 3.0 JSON documentation (boolean value)</li><li><code>-e, --env</code>: Base URL environment variable name</li><li><code>-r, --routePattern</code>: Route pattern generation strategy, 0 means splitting each method of the service interface by slash / (after converting to snake_case), 1 means not splitting, just converting to lowercase</li><li><code>--allowGetWithReqBody</code>: Whether to allow GET requests with request bodies (boolean value)</li></ul><h4 id="examples-2" tabindex="-1"><a class="header-anchor" href="#examples-2" aria-hidden="true">#</a> Examples</h4><p>Generate HTTP routes and client code:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http -c</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate HTTP routes, handlers, and OpenAPI documentation:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http --handler --doc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-http-client" tabindex="-1"><a class="header-anchor" href="#svc-http-client" aria-hidden="true">#</a> svc http client</h3><p><code>svc http client</code> is a subcommand of <code>svc http</code>, used to generate HTTP client code from an OpenAPI 3.0 specification JSON file.</p><h4 id="basic-usage-3" tabindex="-1"><a class="header-anchor" href="#basic-usage-3" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http client [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-2" tabindex="-1"><a class="header-anchor" href="#common-parameters-2" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-f, --file</code>: Path or download link to an OpenAPI 3.0 or Swagger 2.0 specification JSON file</li><li><code>-e, --env</code>: Base URL environment variable name</li><li><code>-p, --pkg</code>: Client package name (default &quot;client&quot;)</li><li><code>-o, --omit</code>: Whether to add <code>omitempty</code> to JSON tags (boolean value)</li></ul><h4 id="examples-3" tabindex="-1"><a class="header-anchor" href="#examples-3" aria-hidden="true">#</a> Examples</h4><p>Generate client code from an OpenAPI document:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http client -f ./api-docs.json -e BASE_URL -p client</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-http-test" tabindex="-1"><a class="header-anchor" href="#svc-http-test" aria-hidden="true">#</a> svc http test</h3><p><code>svc http test</code> is a subcommand of <code>svc http</code>, used to generate integration test code from a Postman Collection file.</p><h4 id="basic-usage-4" tabindex="-1"><a class="header-anchor" href="#basic-usage-4" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http </span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;"> [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-3" tabindex="-1"><a class="header-anchor" href="#common-parameters-3" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>--collection</code>: Path to a Postman Collection v2.1 compatible file</li><li><code>--dotenv</code>: Path to a dotenv format configuration file for integration tests only</li></ul><h4 id="examples-4" tabindex="-1"><a class="header-anchor" href="#examples-4" aria-hidden="true">#</a> Examples</h4><p>Generate test code from a Postman Collection:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc http </span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;"> --collection ./postman_collection.json --dotenv ./.env.test</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-grpc" tabindex="-1"><a class="header-anchor" href="#svc-grpc" aria-hidden="true">#</a> svc grpc</h3><p>The <code>svc grpc</code> command is used to generate gRPC service code.</p><h4 id="basic-usage-5" tabindex="-1"><a class="header-anchor" href="#basic-usage-5" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-4" tabindex="-1"><a class="header-anchor" href="#common-parameters-4" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-o, --omitempty</code>: Whether to add <code>omitempty</code> to JSON tags in generated anonymous structs (boolean value)</li><li><code>--case</code>: protobuf message field naming strategy, supports &quot;lowerCamel&quot; and &quot;snake&quot; (default &quot;lowerCamel&quot;)</li><li><code>--grpc_gen_cmd</code>: Command for generating gRPC service and message code (default uses protoc command)</li><li><code>--http2grpc</code>: Whether to generate RESTful API for gRPC service (boolean value)</li><li><code>--allow_get_body</code>: Whether to allow GET requests with request bodies (boolean value)</li><li><code>--annotated_only</code>: Whether to only generate gRPC API for methods with @grpc annotation (boolean value)</li></ul><h4 id="examples-5" tabindex="-1"><a class="header-anchor" href="#examples-5" aria-hidden="true">#</a> Examples</h4><p>Generate basic gRPC service code:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate gRPC service code and provide RESTful API proxy:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc --http2grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate gRPC service code that only includes methods with @grpc annotation:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc --annotated_only</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-crud" tabindex="-1"><a class="header-anchor" href="#svc-crud" aria-hidden="true">#</a> svc crud</h3><p>The <code>svc crud</code> command is used to generate generic CRUD code from a database. This command is the recommended choice to replace the deprecated <code>ddl</code> command.</p><h4 id="basic-usage-6" tabindex="-1"><a class="header-anchor" href="#basic-usage-6" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc crud [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-5" tabindex="-1"><a class="header-anchor" href="#common-parameters-5" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>--db_orm</code>: Specify ORM, currently only supports gorm (default &quot;gorm&quot;)</li><li><code>--db_driver</code>: Database driver type, options are &quot;mysql&quot;, &quot;postgres&quot;, &quot;sqlite&quot;, &quot;sqlserver&quot;, &quot;tidb&quot;</li><li><code>--db_dsn</code>: Database connection URL</li><li><code>--db_soft</code>: Database soft delete column name (default &quot;deleted_at&quot;)</li><li><code>--db_service</code>: Generate gRPC or REST service, accepts values: grpc or rest</li><li><code>--db_gen_gen</code>: Whether to generate gen.go file (boolean value)</li><li><code>--db_table_prefix</code>: Table prefix or PostgreSQL schema name</li><li><code>--db_table_glob</code>: For filtering tables with glob matching</li><li><code>--db_table_exclude_glob</code>: For excluding tables with glob matching</li><li><code>--case</code>: protobuf message field and JSON tag naming convention, supports &quot;lowerCamel&quot; and &quot;snake&quot; (default &quot;lowerCamel&quot;)</li><li><code>--db_type_mapping</code>: Specify custom column type to Go type mappings</li><li><code>--db_omitempty</code>: Whether to add <code>omitempty</code> to JSON tags in generated model fields (boolean value)</li><li><code>--grpc_gen_cmd</code>: Command for generating gRPC service and message code (default uses protoc command)</li></ul><h4 id="examples-6" tabindex="-1"><a class="header-anchor" href="#examples-6" aria-hidden="true">#</a> Examples</h4><p>Generate CRUD code from a MySQL database:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc crud --db_driver mysql --db_dsn </span><span style="color:#CE9178;">&quot;root:password@tcp(localhost:3306)/mydb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#D4D4D4;"> --db_soft deleted_at --db_service rest</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate CRUD code from a PostgreSQL database, and specify schema:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc crud --db_driver postgres --db_dsn </span><span style="color:#CE9178;">&quot;host=localhost user=postgres password=postgres dbname=mydb port=5432 sslmode=disable&quot;</span><span style="color:#D4D4D4;"> --db_table_prefix public --db_service grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate CRUD code for specific tables only:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc crud --db_driver mysql --db_dsn </span><span style="color:#CE9178;">&quot;root:password@tcp(localhost:3306)/mydb&quot;</span><span style="color:#D4D4D4;"> --db_table_glob </span><span style="color:#CE9178;">&quot;user_*&quot;</span><span style="color:#D4D4D4;"> --db_service rest</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-run" tabindex="-1"><a class="header-anchor" href="#svc-run" aria-hidden="true">#</a> svc run</h3><p>The <code>svc run</code> command is used to run a go-doudou service.</p><h4 id="basic-usage-7" tabindex="-1"><a class="header-anchor" href="#basic-usage-7" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc run [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-6" tabindex="-1"><a class="header-anchor" href="#common-parameters-6" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-w, --watch</code>: Enable watch mode, automatically restart the service when files change (boolean value)</li></ul><h4 id="examples-7" tabindex="-1"><a class="header-anchor" href="#examples-7" aria-hidden="true">#</a> Examples</h4><p>Start the service:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc run</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Start the service with watch mode enabled:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc run -w</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-push" tabindex="-1"><a class="header-anchor" href="#svc-push" aria-hidden="true">#</a> svc push</h3><p>The <code>svc push</code> command is used to build Docker images and push them to an image repository, while generating or updating K8s deployment YAML files.</p><h4 id="basic-usage-8" tabindex="-1"><a class="header-anchor" href="#basic-usage-8" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc push [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-7" tabindex="-1"><a class="header-anchor" href="#common-parameters-7" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-r, --repo</code>: Private Docker image repository</li><li><code>--pre</code>: Image name prefix for building and pushing Docker images</li><li><code>--ver</code>: Docker image version</li></ul><h4 id="examples-8" tabindex="-1"><a class="header-anchor" href="#examples-8" aria-hidden="true">#</a> Examples</h4><p>Build an image and push it to a private repository:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc push -r myregistry.com/myuser</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Build an image with a version tag:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc push -r myregistry.com/myuser --ver v1.0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-deploy" tabindex="-1"><a class="header-anchor" href="#svc-deploy" aria-hidden="true">#</a> svc deploy</h3><p>The <code>svc deploy</code> command wraps the kubectl apply command, used to deploy a service to a Kubernetes cluster.</p><h4 id="basic-usage-9" tabindex="-1"><a class="header-anchor" href="#basic-usage-9" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc deploy [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-8" tabindex="-1"><a class="header-anchor" href="#common-parameters-8" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-k, --k8sfile</code>: Kubernetes YAML file for deploying the service</li></ul><h4 id="examples-9" tabindex="-1"><a class="header-anchor" href="#examples-9" aria-hidden="true">#</a> Examples</h4><p>Deploy a service with default configuration:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc deploy</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Deploy a service with a specified Kubernetes configuration file:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc deploy -k myservice_deployment.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="svc-shutdown" tabindex="-1"><a class="header-anchor" href="#svc-shutdown" aria-hidden="true">#</a> svc shutdown</h3><p>The <code>svc shutdown</code> command wraps the kubectl delete command, used to shut down a deployed service.</p><h4 id="basic-usage-10" tabindex="-1"><a class="header-anchor" href="#basic-usage-10" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc shutdown [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="common-parameters-9" tabindex="-1"><a class="header-anchor" href="#common-parameters-9" aria-hidden="true">#</a> Common Parameters</h4><ul><li><code>-k, --k8sfile</code>: Kubernetes YAML file for deploying the service</li></ul><h4 id="examples-10" tabindex="-1"><a class="header-anchor" href="#examples-10" aria-hidden="true">#</a> Examples</h4><p>Shut down a service deployed with default configuration:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc shutdown</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Shut down a service with a specified Kubernetes configuration file:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc shutdown -k myservice_deployment.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="detailed-explanation-of-the-name-command" tabindex="-1"><a class="header-anchor" href="#detailed-explanation-of-the-name-command" aria-hidden="true">#</a> Detailed Explanation of the name Command</h2><p>The <code>name</code> command is used to bulk add or update JSON tags for struct fields.</p><h3 id="basic-usage-11" tabindex="-1"><a class="header-anchor" href="#basic-usage-11" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou name [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="common-parameters-10" tabindex="-1"><a class="header-anchor" href="#common-parameters-10" aria-hidden="true">#</a> Common Parameters</h3>`,157),ve=e("li",null,[e("code",null,"-f, --file"),s(": Go source file path")],-1),De=e("li",null,[e("code",null,"-c, --case"),s(': JSON tag naming convention, supports "lowerCamel", "snake", etc. (default "lowerCamel")')],-1),ye=e("li",null,[e("code",null,"-s, --strategy"),s(': Naming strategy name, currently only supports "lowerCamel" and "snake" (default "lowerCamel")')],-1),fe=e("li",null,[e("code",null,"-o, --omitempty"),s(": Whether to add "),e("code",null,"omitempty"),s(" marker (boolean value)")],-1),_e=e("code",null,"--form",-1),Ee=s(": Whether to add form tags for "),xe={href:"https://github.com/go-playground/form",target:"_blank",rel:"noopener noreferrer"},ke=s("github.com/go-playground/form"),Ce=c(`<h3 id="examples-11" tabindex="-1"><a class="header-anchor" href="#examples-11" aria-hidden="true">#</a> Examples</h3><p>Add snake_case JSON tags to fields in the User struct:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou name -f ./model/user.go -c snake -o</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Generate both JSON and form tags:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou name -f ./model/user.go -c lowerCamel -o --form</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="detailed-explanation-of-the-enum-command" tabindex="-1"><a class="header-anchor" href="#detailed-explanation-of-the-enum-command" aria-hidden="true">#</a> Detailed Explanation of the enum Command</h2><p>The <code>enum</code> command is used to generate functions implementing the <code>IEnum</code> interface for constants. This is useful for using enum types in Go.</p><h3 id="basic-usage-12" tabindex="-1"><a class="header-anchor" href="#basic-usage-12" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou enum [flags]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="common-parameters-11" tabindex="-1"><a class="header-anchor" href="#common-parameters-11" aria-hidden="true">#</a> Common Parameters</h3><ul><li><code>-f, --file</code>: Absolute path to a Go source file</li></ul><h3 id="examples-12" tabindex="-1"><a class="header-anchor" href="#examples-12" aria-hidden="true">#</a> Examples</h3><p>Generate enum interface implementations for a file containing constant definitions:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou enum -f ./enum/status.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Example of generated code (assuming status.go defines constants of type Status):</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Original file</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Status</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusPending </span><span style="color:#9CDCFE;">Status</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">iota</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusActive</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusInactive</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Generated functions</span></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (s *Status) </span><span style="color:#DCDCAA;">StringSetter</span><span style="color:#D4D4D4;">(value </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> value {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusPending&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusPending</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusActive&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusActive</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusInactive&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusInactive</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        *</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;"> = StatusPending</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (s *Status) </span><span style="color:#DCDCAA;">StringGetter</span><span style="color:#D4D4D4;">() </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> *s {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> StatusPending:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusPending&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> StatusActive:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusActive&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> StatusInactive:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusInactive&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;StatusPending&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="detailed-explanation-of-the-version-command" tabindex="-1"><a class="header-anchor" href="#detailed-explanation-of-the-version-command" aria-hidden="true">#</a> Detailed Explanation of the version Command</h2><p>The <code>version</code> command is used to display the version number of go-doudou and check if a new version is available.</p><h3 id="basic-usage-13" tabindex="-1"><a class="header-anchor" href="#basic-usage-13" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou version</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="examples-13" tabindex="-1"><a class="header-anchor" href="#examples-13" aria-hidden="true">#</a> Examples</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou version</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Example output:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou version v2.5.8
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>If an updated version is detected, you will be prompted whether to upgrade:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">A new version is available: v2.5.9
Do you want to upgrade? [Y/n]
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="detailed-explanation-of-the-work-command" tabindex="-1"><a class="header-anchor" href="#detailed-explanation-of-the-work-command" aria-hidden="true">#</a> Detailed Explanation of the work Command</h2><p>The <code>work</code> command is used to build modular applications, it creates a project structure with a workspace and a main entry module.</p><h3 id="basic-usage-14" tabindex="-1"><a class="header-anchor" href="#basic-usage-14" aria-hidden="true">#</a> Basic Usage</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work [flags]</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou work [command]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="subcommands-1" tabindex="-1"><a class="header-anchor" href="#subcommands-1" aria-hidden="true">#</a> Subcommands</h3><ul><li><code>init</code>: Initialize a workspace folder</li></ul><h3 id="work-init" tabindex="-1"><a class="header-anchor" href="#work-init" aria-hidden="true">#</a> work init</h3><p>The <code>work init</code> command is used to initialize a workspace folder for developing modular applications.</p><h4 id="basic-usage-15" tabindex="-1"><a class="header-anchor" href="#basic-usage-15" aria-hidden="true">#</a> Basic Usage</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work init [dir]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>where <code>[dir]</code> is the path to the workspace directory to initialize. If not specified, the current directory is used.</p><h4 id="workspace-structure" tabindex="-1"><a class="header-anchor" href="#workspace-structure" aria-hidden="true">#</a> Workspace Structure</h4><p>After executing the <code>work init</code> command, go-doudou will create the following workspace structure:</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">workspace/              # Workspace root directory
\u251C\u2500\u2500 go.work             # Go workspace file, automatically includes main module and other components
\u2514\u2500\u2500 main/               # Main entry module directory
    \u251C\u2500\u2500 go.mod          # go.mod file for the main module
    \u251C\u2500\u2500 .env            # Environment variable configuration file
    \u2514\u2500\u2500 cmd/            # Command directory
        \u2514\u2500\u2500 main.go     # Main entry file, responsible for loading and running all components
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>When adding components using <code>svc init --module</code>, go-doudou will automatically call the <code>go work use</code> command to add the new component to the workspace, and automatically update the <code>main/cmd/main.go</code> file to import the new component&#39;s plugins.</p><h4 id="examples-14" tabindex="-1"><a class="header-anchor" href="#examples-14" aria-hidden="true">#</a> Examples</h4><p>Initialize the current directory as a workspace:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work init</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Specify a directory as a workspace:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou work init ./my-workspace</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="practical-application-examples" tabindex="-1"><a class="header-anchor" href="#practical-application-examples" aria-hidden="true">#</a> Practical Application Examples</h2><h3 id="_1-microservice-initialization-and-development-process" tabindex="-1"><a class="header-anchor" href="#_1-microservice-initialization-and-development-process" aria-hidden="true">#</a> 1. Microservice Initialization and Development Process</h3><p>Here is a complete microservice development process:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Step 1: Initialize the project</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init myservice -m github.com/myorg/myservice</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 2: Edit the svc.go file to define the service interface</span></span>
<span class="line"><span style="color:#6A9955;"># Define the service interface in myservice/svc.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 3: Generate HTTP and gRPC service code</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> myservice</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc http -c --doc</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 4: Implement business logic</span></span>
<span class="line"><span style="color:#6A9955;"># Edit the svcimpl.go file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 5: Run the service</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc run</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 6: Build the image and deploy</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc push -r myregistry.com/myuser</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc deploy</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_2-database-table-based-microservice-generation" tabindex="-1"><a class="header-anchor" href="#_2-database-table-based-microservice-generation" aria-hidden="true">#</a> 2. Database Table-Based Microservice Generation</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Step 1: Initialize a project with database support</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init dbservice -m github.com/myorg/dbservice --db_driver mysql --db_dsn </span><span style="color:#CE9178;">&quot;root:password@tcp(localhost:3306)/mydb?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#D4D4D4;"> --db_soft deleted_at --db_grpc --db_rest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 2: Run the service</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> dbservice</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc run</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-using-the-crud-command-to-generate-a-crud-service-from-an-existing-database" tabindex="-1"><a class="header-anchor" href="#_3-using-the-crud-command-to-generate-a-crud-service-from-an-existing-database" aria-hidden="true">#</a> 3. Using the crud Command to Generate a CRUD Service from an Existing Database</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Step 1: Run the command in an existing project directory</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> myproject</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc crud --db_driver postgres --db_dsn </span><span style="color:#CE9178;">&quot;host=localhost user=postgres password=postgres dbname=mydb&quot;</span><span style="color:#D4D4D4;"> --db_service rest --db_soft deleted_at</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 2: Run the generated service</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc run</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_4-modular-application-development-in-a-workspace" tabindex="-1"><a class="header-anchor" href="#_4-modular-application-development-in-a-workspace" aria-hidden="true">#</a> 4. Modular Application Development in a Workspace</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Step 1: Initialize the workspace</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou work init my-workspace</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> my-workspace</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 2: Initialize modular components</span></span>
<span class="line"><span style="color:#6A9955;"># go-doudou will automatically execute &quot;go work use&quot; to add the component to the workspace</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init component-a -m my-workspace/component-a --module</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init component-b -m my-workspace/component-b --module</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 3: Define the service interface and generate code in each component</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> component-a</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc http -c</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ../component-b</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc http -c</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 4: Start the main application - the main module will automatically import all components</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> ../main</span></span>
<span class="line"><span style="color:#D4D4D4;">go run cmd/main.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>How modular applications work:</p><ul><li>Each component generates a <code>plugin</code> package during initialization, used to register itself to the main application</li><li>The main application (<code>main</code> module) automatically imports all component plugins and initializes them at runtime</li><li>When calling <code>svc init --module</code>, go-doudou automatically executes <code>go work use</code> to add the new component to the workspace</li><li>At the same time, it updates the <code>main/cmd/main.go</code> file, adding import statements for the new component&#39;s plugins</li></ul><h3 id="_5-implementing-enum-types" tabindex="-1"><a class="header-anchor" href="#_5-implementing-enum-types" aria-hidden="true">#</a> 5. Implementing Enum Types</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Step 1: Define enum constants</span></span>
<span class="line"><span style="color:#6A9955;"># Define the following in a status.go file</span></span>
<span class="line"><span style="color:#DCDCAA;">type</span><span style="color:#D4D4D4;"> Status int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">const (</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusPending Status = iota</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusActive</span></span>
<span class="line"><span style="color:#D4D4D4;">    StatusInactive</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 2: Generate enum interface implementation</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou enum -f ./model/status.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_6-generate-autocompletion-scripts" tabindex="-1"><a class="header-anchor" href="#_6-generate-autocompletion-scripts" aria-hidden="true">#</a> 6. Generate Autocompletion Scripts</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Generate bash autocompletion script</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou completion bash &gt; ~/.bash_completion</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Generate zsh autocompletion script</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou completion zsh &gt; ~/.zsh_completion</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="advanced-usage-and-tips" tabindex="-1"><a class="header-anchor" href="#advanced-usage-and-tips" aria-hidden="true">#</a> Advanced Usage and Tips</h2><h3 id="_1-using-annotations-to-control-interface-permissions" tabindex="-1"><a class="header-anchor" href="#_1-using-annotations-to-control-interface-permissions" aria-hidden="true">#</a> 1. Using Annotations to Control Interface Permissions</h3><p>In the service interface, you can add annotations using special comments, such as:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// @role(ADMIN)</span></span>
<span class="line"><span style="color:#DCDCAA;">GetAdminData</span><span style="color:#D4D4D4;">(ctx context.Context) (data </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then check these annotations in middleware:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">annotations</span><span style="color:#D4D4D4;"> := httpsrv.RouteAnnotationStore.</span><span style="color:#DCDCAA;">GetParams</span><span style="color:#D4D4D4;">(routeName, </span><span style="color:#CE9178;">&quot;@role&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> !sliceutils.</span><span style="color:#DCDCAA;">StringContains</span><span style="color:#D4D4D4;">(annotations, userRole) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// Deny access</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-custom-protoc-command" tabindex="-1"><a class="header-anchor" href="#_2-custom-protoc-command" aria-hidden="true">#</a> 2. Custom protoc Command</h3><p>For complex gRPC services, you can customize the protoc command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc grpc --grpc_gen_cmd </span><span style="color:#CE9178;">&quot;protoc --proto_path=. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative --validate_out=lang=go,paths=source_relative:. transport/grpc/myservice.proto&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_3-environment-variables-affecting-service-behavior" tabindex="-1"><a class="header-anchor" href="#_3-environment-variables-affecting-service-behavior" aria-hidden="true">#</a> 3. Environment Variables Affecting Service Behavior</h3><p>go-doudou supports various environment variables to configure service behavior:</p><ul><li><code>GDD_SERVICE_NAME</code>: Service name</li><li><code>GDD_SERVICE_GROUP</code>: Service group name</li><li><code>GDD_SERVICE_VERSION</code>: Service version</li><li><code>GDD_WEIGHT</code>: Service instance weight</li><li><code>GDD_REGISTER_HOST</code>: Service registration host</li><li><code>GDD_HTTP_PORT</code>: HTTP service port</li><li><code>GDD_GRPC_PORT</code>: gRPC service port</li><li><code>GDD_LOG_LEVEL</code>: Log level, optional values: &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;</li><li><code>GDD_PROMETHEUS</code>: Whether to enable Prometheus metrics collection</li></ul><p>Example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GDD_SERVICE_NAME=myservice</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GDD_HTTP_PORT=8080</span></span>
<span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GDD_LOG_LEVEL=debug</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc run</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-integration-testing-tips" tabindex="-1"><a class="header-anchor" href="#_4-integration-testing-tips" aria-hidden="true">#</a> 4. Integration Testing Tips</h3><p>Using the test code generated by the <code>svc http test</code> command, you can easily implement integration tests:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Step 1: Generate test code from a Postman Collection</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc http </span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;"> --collection ./collection.json --dotenv ./.env.test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Step 2: Run the tests</span></span>
<span class="line"><span style="color:#D4D4D4;">go </span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;"> -v ./test/...</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_5-modular-application-development-tips" tabindex="-1"><a class="header-anchor" href="#_5-modular-application-development-tips" aria-hidden="true">#</a> 5. Modular Application Development Tips</h3><p>For large projects, you can easily manage modular applications using the <code>work</code> command and the <code>--module</code> flag:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Initialize workspace</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou work init my-workspace</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> my-workspace</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Add multiple modules - go-doudou will automatically call go work use</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init api-gateway -m my-workspace/api-gateway --module</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init user-service -m my-workspace/user-service --module</span></span>
<span class="line"><span style="color:#D4D4D4;">go-doudou svc init product-service -m my-workspace/product-service --module</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Start the application (main module automatically imports and initializes all components)</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#D4D4D4;"> main</span></span>
<span class="line"><span style="color:#D4D4D4;">go run cmd/main.go</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Advantages of modular applications:</p><ul><li>Clearer code organization, each component is maintained independently</li><li>Can develop and test each component independently</li><li>Shared dependencies are resolved through go.work, avoiding dependency conflicts</li><li>The main application automatically integrates all components, no need to manually write integration code</li><li>Suitable for the development and management of large microservice applications</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><p>The go-doudou command-line tool provides rich functionality to help developers quickly build, deploy, and manage microservices. Through the various commands and subcommands introduced in this article, you can easily complete the entire process from service initialization and code generation to deployment.</p><p>The biggest feature of go-doudou is simplifying the microservice development process, eliminating the need to write a lot of boilerplate code, allowing you to focus on implementing business logic. It supports the generation of RESTful API and gRPC services, as well as integration with databases, making it an ideal choice for building modern Go microservices.</p><p>In addition, go-doudou also provides powerful modular application development support. Through the <code>work</code> command and the <code>--module</code> flag, you can easily manage multi-module projects. go-doudou will automatically execute <code>go work use</code> to add components to the workspace, and automatically import and initialize all components in the main application, greatly simplifying the development and maintenance work of modular applications.</p><div class="custom-container warning"><p class="custom-container-title">Important Note</p><p>Please note that the <code>ddl</code> command has been deprecated and is no longer recommended for use. If you need to generate code from a database or synchronize Go structs to a database, please use the <code>svc crud</code> command instead.</p></div>`,89),we=s("I hope this article helps you understand and use the go-doudou CLI tool. For more details, please refer to the "),Ae={href:"https://go-doudou.github.io/",target:"_blank",rel:"noopener noreferrer"},Se=s("official documentation"),qe=s(" and example code repositories.");function Pe(Te,Ge){const n=i("RouterLink"),l=i("ExternalLinkIcon");return t(),r(p,null,[m,e("nav",h,[e("ul",null,[e("li",null,[a(n,{to:"#installation-and-upgrade"},{default:o(()=>[b]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#installing-go-doudou"},{default:o(()=>[g]),_:1})]),e("li",null,[a(n,{to:"#upgrading-go-doudou"},{default:o(()=>[v]),_:1})])])]),e("li",null,[a(n,{to:"#command-overview"},{default:o(()=>[D]),_:1})]),e("li",null,[a(n,{to:"#detailed-explanation-of-the-completion-command"},{default:o(()=>[y]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#basic-usage"},{default:o(()=>[f]),_:1})]),e("li",null,[a(n,{to:"#subcommands"},{default:o(()=>[_]),_:1})]),e("li",null,[a(n,{to:"#examples"},{default:o(()=>[E]),_:1})])])]),e("li",null,[a(n,{to:"#detailed-explanation-of-the-svc-command"},{default:o(()=>[x]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#svc-init"},{default:o(()=>[k]),_:1})]),e("li",null,[a(n,{to:"#svc-http"},{default:o(()=>[C]),_:1})]),e("li",null,[a(n,{to:"#svc-http-client"},{default:o(()=>[w]),_:1})]),e("li",null,[a(n,{to:"#svc-http-test"},{default:o(()=>[A]),_:1})]),e("li",null,[a(n,{to:"#svc-grpc"},{default:o(()=>[S]),_:1})]),e("li",null,[a(n,{to:"#svc-crud"},{default:o(()=>[q]),_:1})]),e("li",null,[a(n,{to:"#svc-run"},{default:o(()=>[P]),_:1})]),e("li",null,[a(n,{to:"#svc-push"},{default:o(()=>[T]),_:1})]),e("li",null,[a(n,{to:"#svc-deploy"},{default:o(()=>[G]),_:1})]),e("li",null,[a(n,{to:"#svc-shutdown"},{default:o(()=>[I]),_:1})])])]),e("li",null,[a(n,{to:"#detailed-explanation-of-the-name-command"},{default:o(()=>[R]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#basic-usage-11"},{default:o(()=>[U]),_:1})]),e("li",null,[a(n,{to:"#common-parameters-10"},{default:o(()=>[B]),_:1})]),e("li",null,[a(n,{to:"#examples-11"},{default:o(()=>[z]),_:1})])])]),e("li",null,[a(n,{to:"#detailed-explanation-of-the-enum-command"},{default:o(()=>[O]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#basic-usage-12"},{default:o(()=>[j]),_:1})]),e("li",null,[a(n,{to:"#common-parameters-11"},{default:o(()=>[L]),_:1})]),e("li",null,[a(n,{to:"#examples-12"},{default:o(()=>[N]),_:1})])])]),e("li",null,[a(n,{to:"#detailed-explanation-of-the-version-command"},{default:o(()=>[W]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#basic-usage-13"},{default:o(()=>[M]),_:1})]),e("li",null,[a(n,{to:"#examples-13"},{default:o(()=>[H]),_:1})])])]),e("li",null,[a(n,{to:"#detailed-explanation-of-the-work-command"},{default:o(()=>[F]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#basic-usage-14"},{default:o(()=>[J]),_:1})]),e("li",null,[a(n,{to:"#subcommands-1"},{default:o(()=>[V]),_:1})]),e("li",null,[a(n,{to:"#work-init"},{default:o(()=>[K]),_:1})])])]),e("li",null,[a(n,{to:"#practical-application-examples"},{default:o(()=>[Y]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#_1-microservice-initialization-and-development-process"},{default:o(()=>[Q]),_:1})]),e("li",null,[a(n,{to:"#_2-database-table-based-microservice-generation"},{default:o(()=>[X]),_:1})]),e("li",null,[a(n,{to:"#_3-using-the-crud-command-to-generate-a-crud-service-from-an-existing-database"},{default:o(()=>[Z]),_:1})]),e("li",null,[a(n,{to:"#_4-modular-application-development-in-a-workspace"},{default:o(()=>[$]),_:1})]),e("li",null,[a(n,{to:"#_5-implementing-enum-types"},{default:o(()=>[ee]),_:1})]),e("li",null,[a(n,{to:"#_6-generate-autocompletion-scripts"},{default:o(()=>[se]),_:1})])])]),e("li",null,[a(n,{to:"#advanced-usage-and-tips"},{default:o(()=>[ae]),_:1}),e("ul",null,[e("li",null,[a(n,{to:"#_1-using-annotations-to-control-interface-permissions"},{default:o(()=>[ne]),_:1})]),e("li",null,[a(n,{to:"#_2-custom-protoc-command"},{default:o(()=>[oe]),_:1})]),e("li",null,[a(n,{to:"#_3-environment-variables-affecting-service-behavior"},{default:o(()=>[le]),_:1})]),e("li",null,[a(n,{to:"#_4-integration-testing-tips"},{default:o(()=>[ie]),_:1})]),e("li",null,[a(n,{to:"#_5-modular-application-development-tips"},{default:o(()=>[ce]),_:1})])])]),e("li",null,[a(n,{to:"#summary"},{default:o(()=>[te]),_:1})])])]),e("p",null,[re,pe,e("a",de,[ue,a(l)]),me,e("a",he,[be,a(l)])]),ge,e("ul",null,[ve,De,ye,fe,e("li",null,[_e,Ee,e("a",xe,[ke,a(l)])])]),Ce,e("p",null,[we,e("a",Ae,[Se,a(l)]),qe])],64)}var Ue=d(u,[["render",Pe]]);export{Ue as default};
