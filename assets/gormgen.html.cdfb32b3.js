import{r as o,o as l,a as p,b as s,e,F as t,f as n,g as r}from"./app.2025f35b.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const i={},D=s("h1",{id:"a-powerful-go-backend-tool-one-click-generation-of-restful-and-grpc-microservices-from-databases",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#a-powerful-go-backend-tool-one-click-generation-of-restful-and-grpc-microservices-from-databases","aria-hidden":"true"},"#"),n(" A Powerful Go Backend Tool: One-Click Generation of RESTful and gRPC Microservices from Databases")],-1),u=s("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f500ce4a07c64f59900b5c25d783a486~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"},null,-1),d=n(" Photo by "),y={href:"https://unsplash.com/@neom?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText",target:"_blank",rel:"noopener noreferrer"},m=n("NEOM"),b=n(" on "),C={href:"https://unsplash.com/photos/0SUho_B0nus?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText",target:"_blank",rel:"noopener noreferrer"},q=n("Unsplash"),h=r(`<p>In most backend development careers, daily work primarily revolves around writing database CRUD interfaces for business needs. Based on our practical business development experience, we&#39;ve added a new feature to go-doudou v2.1.4: generating RESTful and gRPC services directly from databases using gorm. This helps Go developers implement requirements faster and better, enabling quick launches. This feature currently supports the following 6 types of interfaces:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">Post{{.ModelStructName}}(ctx context.Context, body dto.{{.ModelStructName}}) (data {{.PriKeyType}}, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Post{{.ModelStructName}}</span><span style="color:#DCDCAA;">s</span><span style="color:#D4D4D4;">(ctx context.Context, body []dto.{{.ModelStructName}}) (data []{{.PriKeyType}}, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Get{{.ModelStructName}}</span><span style="color:#DCDCAA;">_Id</span><span style="color:#D4D4D4;">(ctx context.Context, id {{.PriKeyType}}) (data dto.{{.ModelStructName}}, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Put{{.ModelStructName}}(ctx context.Context, body dto.{{.ModelStructName}}) </span><span style="color:#4EC9B0;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Delete{{.ModelStructName}}</span><span style="color:#DCDCAA;">_Id</span><span style="color:#D4D4D4;">(ctx context.Context, id {{.PriKeyType}}) </span><span style="color:#4EC9B0;">error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">Get{{.ModelStructName}}</span><span style="color:#DCDCAA;">s</span><span style="color:#D4D4D4;">(ctx context.Context, parameter dto.Parameter) (data dto.Page, err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><code>PostXXX</code>: Single data addition interface</li><li><code>PostXXXs</code>: Batch data addition interface</li><li><code>GetXXX_Id</code>: Query single data by primary key ID interface</li><li><code>PutXXX</code>: Update single data by primary key ID interface</li><li><code>DeleteXXX_Id</code>: Delete single data by primary key ID interface</li><li><code>GetXXXs</code>: Pagination query interface</li></ul><p>More common interfaces will be added based on actual needs in the future. Below is an example of code generation command and an explanation of the command line parameters:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init myproject --db_driver mysql --db_dsn </span><span style="color:#CE9178;">&quot;root:1234@tcp(127.0.0.1:3306)/tutorial?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><span style="color:#D4D4D4;"> --db_soft delete_at --db_grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>go-doudou svc init myproject</code>: This command initializes or incrementally updates the myproject project. If the myproject folder doesn&#39;t exist, it will be created automatically. If there&#39;s no folder path or project name after <code>go-doudou svc init</code>, it will default to generating code in the current folder. This command serves dual purposes: it can initialize and generate a full set of code, or it can be used for incremental code generation during subsequent project iterations.</li><li><code>--db_driver</code>: Sets the database driver, supporting parameters include mysql, postgres, sqlite, sqlserver, and tidb.</li><li><code>--db_dsn</code>: Sets the database connection address, note that double quotes are needed before and after.</li><li><code>--db_soft</code>: Sets the field that indicates soft deletion, the default value is <code>deleted_at</code>. The gorm soft deletion mechanism will be used only if the database table structure has the field specified by <code>--db_soft</code>.</li><li><code>--db_grpc</code>: Sets whether to generate a full set of gRPC service code, the default value is <code>false</code>.</li><li>There&#39;s another parameter <code>--db_table_prefix</code>, mainly used for PostgreSQL to specify the schema name.</li></ul><p>The <code>go-doudou svc init</code> command has other features and command line parameters. If interested, you can execute the command <code>go-doudou svc init --help</code> to view them.</p><p>Our typical workflow for using this feature is to first create models through database GUI tools like Navicat, then execute the go-doudou command to generate a full set of code. As requirements increase and the project continues to iterate with new tables, we execute the go-doudou command again for incremental code generation. This feature will not modify or overwrite any manually customized interfaces and code - it&#39;s completely incremental generation, so you can use it with confidence! Let&#39;s try it out below!</p><p>We&#39;ll use PostgreSQL as an example. First, create a database called testpg with <code>create database testpg;</code>, then import the following DDL statements:</p><div class="language-sql ext-sql line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">-- Create &quot;address&quot; table</span></span>
<span class="line"><span style="color:#569CD6;">CREATE</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">TABLE</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;address&quot;</span><span style="color:#D4D4D4;"> (</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">bigserial</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NOT</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;uid&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">bigint</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;phone&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">character</span><span style="color:#D4D4D4;"> varying(</span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">character</span><span style="color:#D4D4D4;"> varying(</span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;zipcode&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">character</span><span style="color:#D4D4D4;"> varying(</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;address&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">character</span><span style="color:#D4D4D4;"> varying(</span><span style="color:#B5CEA8;">250</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;default_address&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">bigint</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;add_time&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">bigint</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">PRIMARY</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">KEY</span><span style="color:#D4D4D4;"> (</span><span style="color:#CE9178;">&quot;id&quot;</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON TABLE &quot;address&quot; IS </span><span style="color:#CE9178;">&#39;\u5730\u5740\u4FE1\u606F&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;id&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;id&quot; IS </span><span style="color:#CE9178;">&#39;\u4E3B\u952E&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;uid&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;uid&quot; IS </span><span style="color:#CE9178;">&#39;\u7528\u6237\u7F16\u53F7&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;phone&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;phone&quot; IS </span><span style="color:#CE9178;">&#39;\u7528\u6237\u624B\u673A&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;name&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;name&quot; IS </span><span style="color:#CE9178;">&#39;\u7528\u6237\u540D\u5B57&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;zipcode&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;zipcode&quot; IS </span><span style="color:#CE9178;">&#39;\u90AE\u653F\u7F16\u7801&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;address&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;address&quot; IS </span><span style="color:#CE9178;">&#39;\u5730\u5740&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;default_address&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;default_address&quot; IS </span><span style="color:#CE9178;">&#39;\u9ED8\u8BA4\u5730\u5740&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">-- Set comment to column: &quot;add_time&quot; on table: &quot;address&quot;</span></span>
<span class="line"><span style="color:#569CD6;">COMMENT ON COLUMN &quot;address&quot; .&quot;add_time&quot; IS </span><span style="color:#CE9178;">&#39;\u6DFB\u52A0\u65F6\u95F4&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>[Note: The original SQL contains many more tables. For brevity, we&#39;ve only shown a portion here.]</p><p>Then we can execute the go-doudou command to generate code:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc init testpg --db_driver postgres --db_dsn </span><span style="color:#CE9178;">&quot;host=localhost user=corteza password=corteza dbname=testpg port=5432 sslmode=disable TimeZone=Asia/Shanghai&quot;</span><span style="color:#D4D4D4;"> --db_soft deleted_at --db_grpc</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Run <code>go run cmd/main.go</code> to start the service. The code includes an OpenAPI 3.0 interface description file testpg_openapi3.json, which can be directly imported into Postman for API testing.</p><h2 id="pagination-query-interface" tabindex="-1"><a class="header-anchor" href="#pagination-query-interface" aria-hidden="true">#</a> Pagination Query Interface</h2><p>It&#39;s important to explain the pagination query interfaces in detail. Taking the <code>GetUsers(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error)</code> interface method as an example, it will generate a &quot;get /users&quot; pagination query interface. After importing into Postman, we will see the following interface:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e518d99d2f934e229029613551baa937~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>The default query parameter names filled in there are incorrect. You need to modify them according to the following table to make the API work:</p><table><thead><tr><th>Default Postman Parameter Name</th><th>Correct Parameter Name</th><th>Parameter Description</th></tr></thead><tbody><tr><td>page</td><td>parameter[page]</td><td>Page number, pass 0 for the first page</td></tr><tr><td>size</td><td>parameter[size]</td><td>Number of items per page</td></tr><tr><td>sort</td><td>parameter[sort]</td><td>Sorting, multiple sort conditions concatenated with English commas, single sort condition is ascending by default, if the first character is &quot;-&quot;, it&#39;s descending</td></tr><tr><td>order</td><td>parameter[order]</td><td>Ascending/descending, ascending by default, can be omitted. If &quot;DESC&quot; is passed, it&#39;s descending. Usually just using the sort parameter is sufficient</td></tr><tr><td>fields</td><td>parameter[fields]</td><td>Specify which fields to return, note that you need to pass the field names in the database, multiple fields concatenated with English commas</td></tr><tr><td>filters</td><td>parameter[filters]</td><td>Filter conditions, supports multi-dimensional arrays for nested filtering, explained in detail below</td></tr></tbody></table><p>The effect of calling the pagination query interface is shown below:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/686d8ca28ced41028cb5ea2ed2d76569~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>For convenient debugging, here&#39;s the curl command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">curl --location --globoff </span><span style="color:#CE9178;">&#39;http://localhost:6060/users?parameter[page]=0&amp;parameter[size]=10&amp;parameter[sort]=-phone%2Cid&amp;parameter[fields]=id%2Cphone%2Cemail&amp;parameter[filters][0]=email&amp;parameter[filters][1]=like&amp;parameter[filters][2]=com&#39;</span><span style="color:#D4D4D4;"> \\</span></span>
<span class="line"><span style="color:#D4D4D4;">--header </span><span style="color:#CE9178;">&#39;Accept: application/json&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The filter conditions need to be passed as a one-dimensional or multi-dimensional array. An array can contain at most three elements: the first is the database field name, the second is the operator, and the third is the condition value, which can be an array.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Syntax:</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;column_name&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;operator&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;values&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Example:</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;=&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#6A9955;">// Shorthand:</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Generated SQL:</span></span>
<span class="line"><span style="color:#6A9955;">// WHERE age = 20</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>An array containing only one element represents a logical operator:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Example</span></span>
<span class="line"><span style="color:#D4D4D4;">[[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;=&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">],[</span><span style="color:#CE9178;">&quot;or&quot;</span><span style="color:#D4D4D4;">],[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;=&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">25</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Generated SQL:</span></span>
<span class="line"><span style="color:#6A9955;">// WHERE age = 20 OR age = 25</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The condition value can be an array:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;between&quot;</span><span style="color:#D4D4D4;">, [</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">] ]</span></span>
<span class="line"><span style="color:#6A9955;">// Generated SQL:</span></span>
<span class="line"><span style="color:#6A9955;">// WHERE age BETWEEN 20 AND 30</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;not in&quot;</span><span style="color:#D4D4D4;">, [</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">22</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">23</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">24</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">25</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">26</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">26</span><span style="color:#D4D4D4;">] ]</span></span>
<span class="line"><span style="color:#6A9955;">// Generated SQL:</span></span>
<span class="line"><span style="color:#6A9955;">// WHERE age NOT IN(20, 21, 22, 23, 24, 25, 26, 26)</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Nested filter conditions are supported:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">[</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span></span>
<span class="line"><span style="color:#D4D4D4;">        [</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&gt;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">        [</span><span style="color:#CE9178;">&quot;and&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        [</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;&lt;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    ],</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#CE9178;">&quot;and&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;like&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;john&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#CE9178;">&quot;and&quot;</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;like&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;doe&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#6A9955;">// Generated SQL:</span></span>
<span class="line"><span style="color:#6A9955;">// WHERE ( (age &gt; 20 AND age &lt; 20) and name like &#39;%john%&#39; and name like &#39;%doe%&#39; )</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>If you need to pass a <code>null</code> value, you can pass <code>&quot;null&quot;</code> or lowercase <code>null</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Incorrect</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">NULL</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Null</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is not&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">NULL</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is not&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Null</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Correct</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;NULL&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Null&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;null&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is not&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;NULL&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is not&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Null&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is not&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;null&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"><span style="color:#D4D4D4;">[ </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;is not&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="table-relationships" tabindex="-1"><a class="header-anchor" href="#table-relationships" aria-hidden="true">#</a> Table Relationships</h2><p>We should also explain table relationship situations. This feature currently doesn&#39;t support generating code for table relationships, but we provide transaction support based on gorm. Developers can manually implement related logic, such as inserting parent-child table data in a database transaction. In the generated svcimpl.go file, the interface implementation structure has a <code>clone</code> method:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver XXXImpl) </span><span style="color:#DCDCAA;">clone</span><span style="color:#D4D4D4;">(q *query.Query) *TestpgImpl {</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#9CDCFE;">receiver.q</span><span style="color:#D4D4D4;"> = q</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> &amp;receiver</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>You can pass a <code>*query.Query</code> parameter that encapsulates <code>*sql.Tx</code> to clone an interface implementation structure instance for database transaction operations:</p><div class="language-go ext-go line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;"> (receiver *XXXImpl) </span><span style="color:#DCDCAA;">TAuthorPosts</span><span style="color:#D4D4D4;">(ctx context.Context, body dto.SaveAuthorReqDTO) (err </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> errors.</span><span style="color:#DCDCAA;">WithStack</span><span style="color:#D4D4D4;">(receiver.q.</span><span style="color:#DCDCAA;">Transaction</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">func</span><span style="color:#D4D4D4;">(tx *query.Query) </span><span style="color:#4EC9B0;">error</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">instance</span><span style="color:#D4D4D4;"> := receiver.</span><span style="color:#DCDCAA;">clone</span><span style="color:#D4D4D4;">(tx)</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err1</span><span style="color:#D4D4D4;"> := instance.</span><span style="color:#DCDCAA;">PostTAuthor</span><span style="color:#D4D4D4;">(ctx, body.TAuthor)</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err1 != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">         </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> err1</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">err1</span><span style="color:#D4D4D4;"> = instance.</span><span style="color:#DCDCAA;">PostTPosts</span><span style="color:#D4D4D4;">(ctx, body.Posts)</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> err1 != </span><span style="color:#569CD6;">nil</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">         </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> err1</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">nil</span></span>
<span class="line"><span style="color:#D4D4D4;">   }))</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="other-optimizations" tabindex="-1"><a class="header-anchor" href="#other-optimizations" aria-hidden="true">#</a> Other Optimizations</h2><p>This feature is based on the gorm/gen library with several optimizations:</p><ol><li>For PostgreSQL, support for passing <code>--db_table_prefix</code> parameter to specify the schema</li><li>For PostgreSQL, solving the issue of default values with <code>::character varying</code> strings</li><li>Support for passing <code>--db_soft</code> parameter to customize the soft delete field name in the database</li></ol><p>This is an introduction to the functionality of go-doudou for generating complete service code from a database with one click.</p>`,42);function g(E,f){const a=o("ExternalLinkIcon");return l(),p(t,null,[D,s("p",null,[u,d,s("a",y,[m,e(a)]),b,s("a",C,[q,e(a)])]),h],64)}var _=c(i,[["render",g]]);export{_ as default};
