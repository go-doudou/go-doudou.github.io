import{r as o,o as l,a as c,b as e,e as t,F as r,g as n,f as s}from"./app.2025f35b.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const d={},p=n(`<h1 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment" aria-hidden="true">#</a> Deployment</h1><h2 id="ecs-server" tabindex="-1"><a class="header-anchor" href="#ecs-server" aria-hidden="true">#</a> ECS Server</h2><ol><li><p>Clone the project code to the server</p></li><li><p>Compile the code into a binary executable file</p></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">export</span><span style="color:#D4D4D4;"> GDD_ENV=prod &amp;&amp; go build -o api cmd/main.go </span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,4),u={start:"3"},m=s("Launch the executable file, it is recommended to use the screen command or "),h={href:"https://pm2.keymetrics.io/",target:"_blank",rel:"noopener noreferrer"},b=s("pm2"),y=s(". Here is an example using the screen command: first create a window with "),g=e("code",null,"screen -S app",-1),D=s(", where the window name is "),v=e("code",null,"app",-1),_=s(", then start the program with "),f=e("code",null,"./app",-1),k=s(". Use "),x=e("code",null,"ctrl + a + d",-1),w=s(" to exit the screen, and "),E=e("code",null,"screen -r app",-1),C=s(" to open the previously created app window to view the logs output in the command line terminal."),S=n(`<div class="custom-container tip"><p class="custom-container-title">Tip</p><p>If you are using a Centos server, the installation command for screen is <code>yum install -y screen</code>.</p><p>To see a list of currently open windows, you can use the <code>screen -ls</code> command</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">\u279C  ~ screen -ls   </span></span>
<span class="line"><span style="color:#D4D4D4;">There is a screen on:</span></span>
<span class="line"><span style="color:#D4D4D4;">	16048.app	(Detached)</span></span>
<span class="line"><span style="color:#D4D4D4;">1 Socket </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> /var/run/screen/S-root.</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>If you want to delete the app window, you can first execute the command <code>screen -r app</code> to log in, then enter <code>exit</code> and press Enter, which will exit and delete the app window.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">\u279C  ~ screen -r app</span></span>
<span class="line"><span style="color:#D4D4D4;">[screen is terminating]</span></span>
<span class="line"><span style="color:#D4D4D4;">\u279C  ~  </span></span>
<span class="line"><span style="color:#D4D4D4;">\u279C  ~ screen -ls   </span></span>
<span class="line"><span style="color:#D4D4D4;">No Sockets found </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> /var/run/screen/S-root.</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>For general daily development, knowing these few commands is usually sufficient.</p></div><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><p>You can directly use the <code>Dockerfile</code> generated by the <code>go-doudou svc init</code> command, or modify it according to the actual project requirements.</p><p>First, download dependencies to the <code>vendor</code> folder</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go mod vendor
</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Then build the image</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker build -t myservice </span><span style="color:#DCDCAA;">.</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Finally, execute the <code>docker run</code> command</p><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">docker run -it -d -p 6060:6060 myservice</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Remember to change <code>myservice</code> to your own image name.</p><h2 id="kubernetes" tabindex="-1"><a class="header-anchor" href="#kubernetes" aria-hidden="true">#</a> Kubernetes</h2><p><code>go-doudou</code> provides out-of-the-box support for k8s deployment.</p><ol><li>Execute the <code>go-doudou svc push</code> command to package the image and push it to a remote image repository, and finally generate two k8s deployment files, one for deploying stateless services and one for deploying stateful services.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">go-doudou svc push --pre godoudou_ -r wubin1989</span></span>
<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>You can set the image name prefix through the <code>--pre</code> parameter. You need to change <code>wubin1989</code> to your own remote image repository address.</p><p>Each time this command is executed, it will automatically update the version number of the image, with a naming rule of <code>v</code> + <code>yyyyMMddHHmmss</code>, and automatically update the image name in the k8s deployment file.</p><ol start="2"><li>Execute the <code>go-doudou svc deploy</code> command. This command by default uses the file with the <code>_deployment.yaml</code> suffix to deploy stateless services. You can set other k8s deployment file paths through the <code>-k</code> parameter.</li></ol>`,17);function N(T,F){const a=o("ExternalLinkIcon");return l(),c(r,null,[p,e("ol",u,[e("li",null,[m,e("a",h,[b,t(a)]),y,g,D,v,_,f,k,x,w,E,C])]),S],64)}var I=i(d,[["render",N]]);export{I as default};
